
# Файл ".pre-commit-config.yaml":

repos:
  - repo: https://github.com/pre-commit/mirrors-isort
    rev: v5.10.1
    hooks:
      - id: isort
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black



# Файл "pyproject.toml":

[tool.black]
line-length = 120

[tool.isort]
multi_line_output = 3
include_trailing_comma = true



# Файл "app\test.ipynb":

{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Real Time Animation"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Import libs and modules"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import torch\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage.transform import resize\n",
    "\n",
    "from src.ml.services.animation import AnimationService\n",
    "from src.ml.services.model import ModelService\n",
    "from src.ml.services.video_animation import VideoAnimationService"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:06.354464400Z",
     "start_time": "2025-05-18T08:28:06.319894100Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Configuration"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [],
   "source": [
    "RELATIVE = True\n",
    "ADAPT_MOVEMENT_SCALE = True\n",
    "USE_CPU = True\n",
    "VIDEO_CODEC = 'MJPG'\n",
    "SOURCE_IMAGE_NAME = './data/input/nick.jpg'\n",
    "RESULT_VIDEO_DIR = './data/output'\n",
    "RESULT_VIDEO_NAME = './data/output/real_time_test.avi'\n",
    "MODEL_CONFIG_PATH = './data/configs/vox-256.yaml'\n",
    "MODEL_CHECKPOINT_PATH = './data/checkpoints/vox-cpk.pth.tar'\n",
    "WINDOW_NAME = 'Real Time Animation'"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:07.905789700Z",
     "start_time": "2025-05-18T08:28:07.887035700Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "os.makedirs('./data/output', exist_ok=True)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:08.674426200Z",
     "start_time": "2025-05-18T08:28:08.644309100Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Prepare source image"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "outputs": [],
   "source": [
    "source_image = cv2.imread(SOURCE_IMAGE_NAME)\n",
    "source_image = cv2.cvtColor(source_image, cv2.COLOR_BGR2RGB)\n",
    "source_image = resize(source_image, (256, 256))[..., :3]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:10.879897600Z",
     "start_time": "2025-05-18T08:28:10.089322900Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(source_image)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:12.167218500Z",
     "start_time": "2025-05-18T08:28:11.970193400Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Prepare model"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OcclusionAwareGenerator(\n",
      "  (dense_motion_network): DenseMotionNetwork(\n",
      "    (hourglass): Hourglass(\n",
      "      (encoder): Encoder(\n",
      "        (down_blocks): ModuleList(\n",
      "          (0): DownBlock2d(\n",
      "            (conv): Conv2d(44, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "            (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "          )\n",
      "          (1): DownBlock2d(\n",
      "            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "            (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "          )\n",
      "          (2): DownBlock2d(\n",
      "            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "            (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "          )\n",
      "          (3): DownBlock2d(\n",
      "            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "            (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "          )\n",
      "          (4): DownBlock2d(\n",
      "            (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "            (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "          )\n",
      "        )\n",
      "      )\n",
      "      (decoder): Decoder(\n",
      "        (up_blocks): ModuleList(\n",
      "          (0): UpBlock2d(\n",
      "            (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          )\n",
      "          (1): UpBlock2d(\n",
      "            (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          )\n",
      "          (2): UpBlock2d(\n",
      "            (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          )\n",
      "          (3): UpBlock2d(\n",
      "            (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          )\n",
      "          (4): UpBlock2d(\n",
      "            (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "            (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          )\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (mask): Conv2d(108, 11, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
      "    (occlusion): Conv2d(108, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
      "    (down): AntiAliasInterpolation2d()\n",
      "  )\n",
      "  (first): SameBlock2d(\n",
      "    (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
      "    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  )\n",
      "  (down_blocks): ModuleList(\n",
      "    (0): DownBlock2d(\n",
      "      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "    )\n",
      "    (1): DownBlock2d(\n",
      "      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "    )\n",
      "  )\n",
      "  (up_blocks): ModuleList(\n",
      "    (0): UpBlock2d(\n",
      "      (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (1): UpBlock2d(\n",
      "      (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "  )\n",
      "  (bottleneck): Sequential(\n",
      "    (r0): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (r1): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (r2): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (r3): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (r4): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "    (r5): ResBlock2d(\n",
      "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "      (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "      (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    )\n",
      "  )\n",
      "  (final): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
      ")\n",
      "MultiScaleDiscriminator(\n",
      "  (discs): ModuleDict(\n",
      "    (1): Discriminator(\n",
      "      (down_blocks): ModuleList(\n",
      "        (0): DownBlock2d(\n",
      "          (conv): Conv2d(3, 64, kernel_size=(4, 4), stride=(1, 1))\n",
      "          (norm): Identity()\n",
      "          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
      "        )\n",
      "        (1): DownBlock2d(\n",
      "          (conv): Conv2d(64, 128, kernel_size=(4, 4), stride=(1, 1))\n",
      "          (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
      "        )\n",
      "        (2): DownBlock2d(\n",
      "          (conv): Conv2d(128, 256, kernel_size=(4, 4), stride=(1, 1))\n",
      "          (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
      "        )\n",
      "        (3): DownBlock2d(\n",
      "          (conv): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1))\n",
      "          (norm): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n",
      "          (pool): Identity()\n",
      "        )\n",
      "      )\n",
      "      (conv): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))\n",
      "    )\n",
      "  )\n",
      ")\n",
      "KPDetector(\n",
      "  (predictor): Hourglass(\n",
      "    (encoder): Encoder(\n",
      "      (down_blocks): ModuleList(\n",
      "        (0): DownBlock2d(\n",
      "          (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "        )\n",
      "        (1): DownBlock2d(\n",
      "          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "        )\n",
      "        (2): DownBlock2d(\n",
      "          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "        )\n",
      "        (3): DownBlock2d(\n",
      "          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "        )\n",
      "        (4): DownBlock2d(\n",
      "          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (decoder): Decoder(\n",
      "      (up_blocks): ModuleList(\n",
      "        (0): UpBlock2d(\n",
      "          (conv): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "        (1): UpBlock2d(\n",
      "          (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "        (2): UpBlock2d(\n",
      "          (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "        (3): UpBlock2d(\n",
      "          (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "        (4): UpBlock2d(\n",
      "          (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (kp): Conv2d(35, 10, kernel_size=(7, 7), stride=(1, 1))\n",
      "  (jacobian): Conv2d(35, 40, kernel_size=(7, 7), stride=(1, 1))\n",
      "  (down): AntiAliasInterpolation2d()\n",
      ")\n"
     ]
    },
    {
     "data": {
      "text/plain": "(OcclusionAwareGenerator(\n   (dense_motion_network): DenseMotionNetwork(\n     (hourglass): Hourglass(\n       (encoder): Encoder(\n         (down_blocks): ModuleList(\n           (0): DownBlock2d(\n             (conv): Conv2d(44, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n             (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n           )\n           (1): DownBlock2d(\n             (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n             (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n           )\n           (2): DownBlock2d(\n             (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n             (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n           )\n           (3): DownBlock2d(\n             (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n             (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n           )\n           (4): DownBlock2d(\n             (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n             (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n           )\n         )\n       )\n       (decoder): Decoder(\n         (up_blocks): ModuleList(\n           (0): UpBlock2d(\n             (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           )\n           (1): UpBlock2d(\n             (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           )\n           (2): UpBlock2d(\n             (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           )\n           (3): UpBlock2d(\n             (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           )\n           (4): UpBlock2d(\n             (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n             (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           )\n         )\n       )\n     )\n     (mask): Conv2d(108, 11, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n     (occlusion): Conv2d(108, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n     (down): AntiAliasInterpolation2d()\n   )\n   (first): SameBlock2d(\n     (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n     (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n   )\n   (down_blocks): ModuleList(\n     (0): DownBlock2d(\n       (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n     )\n     (1): DownBlock2d(\n       (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n     )\n   )\n   (up_blocks): ModuleList(\n     (0): UpBlock2d(\n       (conv): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (1): UpBlock2d(\n       (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n   )\n   (bottleneck): Sequential(\n     (r0): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (r1): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (r2): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (r3): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (r4): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n     (r5): ResBlock2d(\n       (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n       (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n     )\n   )\n   (final): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n ),\n MultiScaleDiscriminator(\n   (discs): ModuleDict(\n     (1): Discriminator(\n       (down_blocks): ModuleList(\n         (0): DownBlock2d(\n           (conv): Conv2d(3, 64, kernel_size=(4, 4), stride=(1, 1))\n           (norm): Identity()\n           (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n         )\n         (1): DownBlock2d(\n           (conv): Conv2d(64, 128, kernel_size=(4, 4), stride=(1, 1))\n           (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n           (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n         )\n         (2): DownBlock2d(\n           (conv): Conv2d(128, 256, kernel_size=(4, 4), stride=(1, 1))\n           (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n           (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n         )\n         (3): DownBlock2d(\n           (conv): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1))\n           (norm): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n           (pool): Identity()\n         )\n       )\n       (conv): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1))\n     )\n   )\n ),\n KPDetector(\n   (predictor): Hourglass(\n     (encoder): Encoder(\n       (down_blocks): ModuleList(\n         (0): DownBlock2d(\n           (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n         )\n         (1): DownBlock2d(\n           (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n         )\n         (2): DownBlock2d(\n           (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n         )\n         (3): DownBlock2d(\n           (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n         )\n         (4): DownBlock2d(\n           (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n           (pool): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n         )\n       )\n     )\n     (decoder): Decoder(\n       (up_blocks): ModuleList(\n         (0): UpBlock2d(\n           (conv): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n         )\n         (1): UpBlock2d(\n           (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n         )\n         (2): UpBlock2d(\n           (conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n         )\n         (3): UpBlock2d(\n           (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n         )\n         (4): UpBlock2d(\n           (conv): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n           (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n         )\n       )\n     )\n   )\n   (kp): Conv2d(35, 10, kernel_size=(7, 7), stride=(1, 1))\n   (jacobian): Conv2d(35, 40, kernel_size=(7, 7), stride=(1, 1))\n   (down): AntiAliasInterpolation2d()\n ))"
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_service = ModelService(\n",
    "    config_path=MODEL_CONFIG_PATH,\n",
    "    checkpoint_path=MODEL_CHECKPOINT_PATH,\n",
    "    cpu=USE_CPU,\n",
    "    verbose=True,\n",
    ")\n",
    "\n",
    "model_service.init_training_models([])"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:32:47.275492900Z",
     "start_time": "2025-05-18T08:32:45.829557700Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "outputs": [],
   "source": [
    "generator, kp_detector = model_service.load_eval_models()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:20.159296400Z",
     "start_time": "2025-05-18T08:28:13.923907600Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Additional functions"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "outputs": [],
   "source": [
    "def preprocess_frame(frame, crop_box, target_size=(256, 256)):\n",
    "    x, y, w, h = crop_box\n",
    "    frame = cv2.flip(frame, 1)\n",
    "    frame = frame[y:y+h, x:x+w]\n",
    "    frame = resize(frame, target_size)[..., :3]\n",
    "    return frame"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:21.438568700Z",
     "start_time": "2025-05-18T08:28:21.382429600Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "outputs": [],
   "source": [
    "def to_tensor(img, use_cpu=False):\n",
    "    tensor = torch.tensor(img[np.newaxis].astype(np.float32)).permute(0, 3, 1, 2)\n",
    "    return tensor if use_cpu else tensor.cuda()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:22.646106200Z",
     "start_time": "2025-05-18T08:28:22.619388200Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "outputs": [],
   "source": [
    "def generate_frame(source, kp_source, frame_tensor, kp_initial, generator, kp_detector):\n",
    "    kp_driving = kp_detector(frame_tensor)\n",
    "    kp_norm = AnimationService.normalize_kp(\n",
    "        kp_source=kp_source,\n",
    "        kp_driving=kp_driving,\n",
    "        kp_driving_initial=kp_initial,\n",
    "        use_relative_movement=RELATIVE,\n",
    "        use_relative_jacobian=RELATIVE,\n",
    "        adapt_movement_scale=ADAPT_MOVEMENT_SCALE,\n",
    "    )\n",
    "    out = generator(source, kp_source=kp_source, kp_driving=kp_norm)\n",
    "    prediction = out['prediction'][0].data.cpu().permute(1, 2, 0).numpy()\n",
    "    \n",
    "    from torchviz import make_dot\n",
    "    prediction_tensor = out['prediction'][0]\n",
    "    make_dot(prediction_tensor, params=dict(generator.named_parameters())).render(\"generator\", format=\"png\")\n",
    "    make_dot(kp_driving['value'], params=dict(kp_detector.named_parameters())).render(\"kp_detector\", format=\"png\")\n",
    "    \n",
    "    return prediction"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:29:52.040658Z",
     "start_time": "2025-05-18T08:29:52.007471100Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Prepare real time animation"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "outputs": [],
   "source": [
    "cap = cv2.VideoCapture(0)\n",
    "fourcc = cv2.VideoWriter_fourcc(*VIDEO_CODEC)\n",
    "out_video = cv2.VideoWriter(RESULT_VIDEO_NAME, fourcc, 12, (256 * 3, 256), True)\n",
    "\n",
    "source_rgb = cv2.cvtColor(source_image.astype('float32'), cv2.COLOR_BGR2RGB)\n",
    "source_tensor = to_tensor(source_image, use_cpu=USE_CPU)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:28:30.426836600Z",
     "start_time": "2025-05-18T08:28:24.285233Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Start real time animation"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    kp_source = kp_detector(source_tensor)\n",
    "    kp_initial = None\n",
    "    crop_box = (143, 87, 322, 322)\n",
    "    count = 0\n",
    "\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        frame_processed = preprocess_frame(frame, crop_box)\n",
    "        frame_tensor = to_tensor(frame_processed, use_cpu=USE_CPU)\n",
    "\n",
    "        if kp_initial is None:\n",
    "            kp_initial = kp_detector(frame_tensor)\n",
    "\n",
    "        prediction = generate_frame(\n",
    "            source_tensor, kp_source, frame_tensor, kp_initial,\n",
    "            generator, kp_detector\n",
    "        )\n",
    "\n",
    "        # Join frames\n",
    "        joined = np.concatenate([\n",
    "            source_rgb,\n",
    "            cv2.cvtColor(prediction, cv2.COLOR_RGB2BGR),\n",
    "            frame_processed\n",
    "        ], axis=1)\n",
    "\n",
    "        # Add text-hint\n",
    "        cv2.putText(\n",
    "            joined, \"Press 'Q' to quit\", (10, 245),\n",
    "            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2, cv2.LINE_AA\n",
    "        )\n",
    "\n",
    "        # Show and write\n",
    "        cv2.imshow(WINDOW_NAME, joined)\n",
    "        out_video.write(np.clip(joined * 255, 0, 255).astype(np.uint8))\n",
    "\n",
    "        if cv2.waitKey(20) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "cap.release()\n",
    "out_video.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    kp_source = kp_detector(source_tensor)\n",
    "    kp_initial = None\n",
    "    crop_box = (143, 87, 322, 322)\n",
    "    count = 0\n",
    "\n",
    "    # while True:\n",
    "    ret, frame = cap.read()\n",
    "    # if not ret:\n",
    "    #     break\n",
    "\n",
    "    frame_processed = preprocess_frame(frame, crop_box)\n",
    "    frame_tensor = to_tensor(frame_processed, use_cpu=USE_CPU)\n",
    "\n",
    "    if kp_initial is None:\n",
    "        kp_initial = kp_detector(frame_tensor)\n",
    "\n",
    "    prediction = generate_frame(\n",
    "        source_tensor, kp_source, frame_tensor, kp_initial,\n",
    "        generator, kp_detector\n",
    "    )\n",
    "\n",
    "    # Join frames\n",
    "    joined = np.concatenate([\n",
    "        source_rgb,\n",
    "        cv2.cvtColor(prediction, cv2.COLOR_RGB2BGR),\n",
    "        frame_processed\n",
    "    ], axis=1)\n",
    "\n",
    "    # Show and write\n",
    "    cv2.imshow(WINDOW_NAME, joined)\n",
    "    out_video.write(np.clip(joined * 255, 0, 255).astype(np.uint8))\n",
    "\n",
    "    # if cv2.waitKey(20) & 0xFF == ord('q'):\n",
    "    #     break\n",
    "\n",
    "cap.release()\n",
    "out_video.release()\n",
    "cv2.destroyAllWindows()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-05-18T08:29:57.885870800Z",
     "start_time": "2025-05-18T08:29:55.150820800Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Image Animation by Prepared Video"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "service = VideoAnimationService(\n",
    "    config_path='./data/configs/vox-256.yaml',\n",
    "    checkpoint_path='./data/checkpoints/vox-cpk.pth.tar',\n",
    "    source_image_path='./data/input/monalisa.png',\n",
    "    driving_video_path='./data/input/my_face.mp4',\n",
    "    result_video_path='./data/output/result.mp4',\n",
    "    relative=False,\n",
    "    adapt_scale=False,\n",
    "    find_best=False,\n",
    "    best_frame=None,\n",
    "    cpu=True,\n",
    ")\n",
    "service.run()"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}



# Файл "app\__init__.py":




# Файл "app\data\configs\vox-256.yaml":

dataset_params:
  root_dir: data/vox-png
  frame_shape: [256, 256, 3]
  id_sampling: True
  pairs_list: data/vox256.csv
  augmentation_params:
    flip_param:
      horizontal_flip: True
      time_flip: True
    jitter_param:
      brightness: 0.1
      contrast: 0.1
      saturation: 0.1
      hue: 0.1


model_params:
  common_params:
    num_kp: 10
    num_channels: 3
    estimate_jacobian: True
  kp_detector_params:
     temperature: 0.1
     block_expansion: 32
     max_features: 1024
     scale_factor: 0.25
     num_blocks: 5
  generator_params:
    block_expansion: 64
    max_features: 512
    num_down_blocks: 2
    num_bottleneck_blocks: 6
    estimate_occlusion_map: True
    dense_motion_params:
      block_expansion: 64
      max_features: 1024
      num_blocks: 5
      scale_factor: 0.25
  discriminator_params:
    scales: [1]
    block_expansion: 32
    max_features: 512
    num_blocks: 4
    sn: True

train_params:
  num_epochs: 100
  num_repeats: 75
  epoch_milestones: [60, 90]
  lr_generator: 2.0e-4
  lr_discriminator: 2.0e-4
  lr_kp_detector: 2.0e-4
  batch_size: 40
  scales: [1, 0.5, 0.25, 0.125]
  checkpoint_freq: 50
  transform_params:
    sigma_affine: 0.05
    sigma_tps: 0.005
    points_tps: 5
  loss_weights:
    generator_gan: 0
    discriminator_gan: 1
    feature_matching: [10, 10, 10, 10]
    perceptual: [10, 10, 10, 10, 10]
    equivariance_value: 10
    equivariance_jacobian: 10

reconstruction_params:
  num_videos: 1000
  format: '.mp4'

animate_params:
  num_pairs: 50
  format: '.mp4'
  normalization_params:
    adapt_movement_scale: False
    use_relative_movement: True
    use_relative_jacobian: True

visualizer_params:
  kp_size: 5
  draw_border: True
  colormap: 'gist_rainbow'



# Файл "app\src\run_model.py":

import sys
from argparse import ArgumentParser, Namespace

import torch
from src.ml.runners import (
    AnimationRunner,
    ReconstructionRunner,
    TrainingRunner,
)
from src.ml.services.logging import LoggingService


def parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("--configs", required=True)
    parser.add_argument("--mode", choices=["train", "reconstruction", "animate"], required=True)
    parser.add_argument("--log_dir", default="log")
    parser.add_argument("--checkpoint", default=None)
    parser.add_argument("--device_ids", default="0", type=lambda x: list(map(int, x.split(","))))
    parser.add_argument("--verbose", action="store_true")
    return parser.parse_args()


if __name__ == "__main__":
    if sys.version_info[0] < 3:
        raise Exception("Use Python 3 or higher.")

    torch.multiprocessing.set_start_method("spawn", force=True)  # Safety for CUDA

    args = parse_args()
    log = LoggingService.setup_logger(__name__)

    mode_to_runner = {"train": TrainingRunner, "reconstruction": ReconstructionRunner, "animate": AnimationRunner}

    runner_class = mode_to_runner[args.mode]
    runner = runner_class(args, log)
    runner.run()



# Файл "app\src\run_server.py":

import logging

import src.server as server
from fastapi import Depends, FastAPI
from src.server.config import APIConfig, LogLevelEnum
from src.server.exceptions import app_exception_handler, exception_handlers
from src.server.routers import router as fomm_router

logging.basicConfig(format="[PID:%(process)d] %(pathname)s:%(lineno)d %(message)s", level=logging.INFO)
config = APIConfig()

app = FastAPI(
    title=f"{config.MODE.capitalize()} Animatica ML API",
    description="This API is designed for the Animatica application.",
    swagger_ui_parameters={"displayRequestDuration": True},
    version=server.__version__,
    debug=(config.LOG_LEVEL == LogLevelEnum.DEBUG),
)

app.include_router(fomm_router, prefix="/api", dependencies=[Depends(server.validate_api_key)])

for exc_type in exception_handlers:
    app.add_exception_handler(exc_type, app_exception_handler)



# Файл "app\src\__init__.py":




# Файл "app\src\ml\__init__.py":




# Файл "app\src\ml\datasets\dataset_repeater.py":

from torch.utils.data import Dataset


class DatasetRepeater(Dataset):
    """Pass several times over the same dataset for better i/o performance."""

    def __init__(self, dataset, num_repeats: int = 100) -> None:
        self.dataset = dataset
        self.num_repeats = num_repeats

    def __len__(self) -> int:
        return self.num_repeats * self.dataset.__len__()

    def __getitem__(self, idx: int):
        return self.dataset[idx % self.dataset.__len__()]



# Файл "app\src\ml\datasets\frames_dataset.py":

import glob
import os

import numpy as np
from skimage import io
from skimage.util import img_as_float32
from sklearn.model_selection import train_test_split
from src.ml.datasets.augmentation import AllAugmentationTransform
from src.ml.datasets.utils import read_video
from torch.utils.data import Dataset


class FramesDataset(Dataset):
    """
    Dataset of videos, each video can be represented as:
      - an image of concatenated frames
      - '.mp4' or '.gif'
      - folder with all frames
    """

    def __init__(
        self,
        root_dir: str,
        frame_shape=(256, 256, 3),
        id_sampling: bool = False,
        is_train: bool = True,
        random_seed=0,
        pairs_list=None,
        augmentation_params=None,
    ) -> None:
        self.root_dir = root_dir
        self.videos = os.listdir(root_dir)
        self.frame_shape = tuple(frame_shape)
        self.pairs_list = pairs_list
        self.id_sampling = id_sampling
        if os.path.exists(os.path.join(root_dir, "train")):
            assert os.path.exists(os.path.join(root_dir, "test"))
            print("Use predefined train-test split.")
            if id_sampling:
                train_videos = {
                    os.path.basename(video).split("#")[0] for video in os.listdir(os.path.join(root_dir, "train"))
                }
                train_videos = list(train_videos)
            else:
                train_videos = os.listdir(os.path.join(root_dir, "train"))
            test_videos = os.listdir(os.path.join(root_dir, "test"))
            self.root_dir = os.path.join(self.root_dir, "train" if is_train else "test")
        else:
            print("Use random train-test split.")
            train_videos, test_videos = train_test_split(self.videos, random_state=random_seed, test_size=0.2)

        self.videos = train_videos if is_train else test_videos
        self.transform = AllAugmentationTransform(**augmentation_params) if is_train else None
        self.is_train = is_train

    def __len__(self) -> int:
        return len(self.videos)

    def __getitem__(self, idx: int):
        if self.is_train and self.id_sampling:
            name = self.videos[idx]
            path = np.random.choice(glob.glob(os.path.join(self.root_dir, name + "*.mp4")))
        else:
            name = self.videos[idx]
            path = os.path.join(self.root_dir, name)

        video_name = os.path.basename(path)

        if self.is_train and os.path.isdir(path):
            frames = os.listdir(path)
            num_frames = len(frames)
            frame_idx = np.sort(np.random.choice(num_frames, replace=True, size=2))
            video_array = [img_as_float32(io.imread(os.path.join(path, frames[idx]))) for idx in frame_idx]
        else:
            video_array = read_video(path, frame_shape=self.frame_shape)
            num_frames = len(video_array)
            frame_idx = (
                np.sort(np.random.choice(num_frames, replace=True, size=2)) if self.is_train else range(num_frames)
            )
            video_array = video_array[frame_idx]

        if self.transform is not None:
            video_array = self.transform(video_array)

        out = {}
        if self.is_train:
            source = np.array(video_array[0], dtype="float32")
            driving = np.array(video_array[1], dtype="float32")

            out["driving"] = driving.transpose((2, 0, 1))
            out["source"] = source.transpose((2, 0, 1))
        else:
            video = np.array(video_array, dtype="float32")
            out["video"] = video.transpose((3, 0, 1, 2))

        out["name"] = video_name

        return out



# Файл "app\src\ml\datasets\paired_dataset.py":

import numpy as np
import pandas as pd
from torch.utils.data import Dataset


class PairedDataset(Dataset):
    """Dataset of pairs for services."""

    def __init__(self, initial_dataset, number_of_pairs: int, seed=0) -> None:
        self.initial_dataset = initial_dataset
        pairs_list = self.initial_dataset.pairs_list

        np.random.seed(seed)

        if not pairs_list:
            max_idx = min(number_of_pairs, len(initial_dataset))
            nx, ny = max_idx, max_idx
            xy = np.mgrid[:nx, :ny].reshape(2, -1).T
            number_of_pairs = min(xy.shape[0], number_of_pairs)
            self.pairs = xy.take(np.random.choice(xy.shape[0], number_of_pairs, replace=False), axis=0)
        else:
            videos = self.initial_dataset.videos
            name_to_index = {name: index for index, name in enumerate(videos)}
            pairs = pd.read_csv(pairs_list)
            pairs = pairs[np.logical_and(pairs["source"].isin(videos), pairs["driving"].isin(videos))]

            number_of_pairs = min(pairs.shape[0], number_of_pairs)
            self.pairs = []
            self.start_frames = []
            for ind in range(number_of_pairs):
                self.pairs.append((name_to_index[pairs["driving"].iloc[ind]], name_to_index[pairs["source"].iloc[ind]]))

    def __len__(self) -> int:
        return len(self.pairs)

    def __getitem__(self, idx: int):
        pair = self.pairs[idx]
        first = self.initial_dataset[pair[0]]
        second = self.initial_dataset[pair[1]]
        first = {"driving_" + key: value for key, value in first.items()}
        second = {"source_" + key: value for key, value in second.items()}

        return {**first, **second}



# Файл "app\src\ml\datasets\replicate.py":

import functools

import torch
import torch.nn as nn
from torch.nn.parallel.data_parallel import DataParallel


class CallbackContext:
    pass


def execute_replication_callbacks(modules):
    """
    Execute a replication callback `__data_parallel_replicate__` on each module created by original replication.

    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`

    Note that, as all modules are isomorphism, we assign each submodule with a context
    (shared among multiple copies of this module on different devices).
    Through this context, different copies can share some information.

    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback
    of any slave copies.
    """
    master_copy = modules[0]
    nr_modules = len(list(master_copy.modules()))
    ctxs = [CallbackContext() for _ in range(nr_modules)]

    for i, module in enumerate(modules):
        for j, m in enumerate(module.modules()):
            if hasattr(m, "__data_parallel_replicate__"):
                m.__data_parallel_replicate__(ctxs[j], i)


class DataParallelWithCallback(DataParallel):
    """
    Data Parallel with a replication callback.

    A replication callback `__data_parallel_replicate__` of each module will be invoked after being created by
    original `replicate` function.
    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`

    Examples:
        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)
        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])
        # sync_bn.__data_parallel_replicate__ will be invoked.
    """

    def replicate(self, module, device_ids):
        modules = super().replicate(module, device_ids)
        execute_replication_callbacks(modules)
        return modules


def patch_replication_callback(data_parallel):
    """
    Monkey-patch an existing `DataParallel` object. Add the replication callback.
    Useful when you have customized `DataParallel` implementation.

    Examples:
        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)
        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])
        > patch_replication_callback(sync_bn)
        # this is equivalent to
        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)
        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])
    """

    assert isinstance(data_parallel, DataParallel)

    old_replicate = data_parallel.replicate

    @functools.wraps(old_replicate)
    def new_replicate(module, device_ids):
        modules = old_replicate(module, device_ids)
        execute_replication_callbacks(modules)
        return modules

    data_parallel.replicate = new_replicate


def ddp_callback_wrapper(module: nn.Module, rank: int = None):
    ctxs = {}
    for idx, m in enumerate(module.modules()):
        if hasattr(m, "__data_parallel_replicate__") and idx not in ctxs:
            ctx = CallbackContext()
            m.__data_parallel_replicate__(ctx, rank if rank is not None else torch.distributed.get_rank())
            ctxs[idx] = ctx
    return ctxs



# Файл "app\src\ml\datasets\utils.py":

import os

import numpy as np
from imageio.v2 import mimread
from skimage import io
from skimage.color import gray2rgb
from skimage.util import img_as_float32


def read_video(name, frame_shape):
    """
    Read video which can be:
      - an image of concatenated frames
      - '.mp4' and'.gif'
      - folder with videos
    """
    if os.path.isdir(name):
        frames = sorted(os.listdir(name))
        num_frames = len(frames)
        video_array = np.array(
            [img_as_float32(io.imread(os.path.join(name, frames[idx]))) for idx in range(num_frames)]
        )
    elif name.lower().endswith(".png") or name.lower().endswith(".jpg"):
        image = io.imread(name)

        if len(image.shape) == 2 or image.shape[2] == 1:
            image = gray2rgb(image)

        if image.shape[2] == 4:
            image = image[..., :3]

        image = img_as_float32(image)

        video_array = np.moveaxis(image, 1, 0)

        video_array = video_array.reshape((-1,) + frame_shape)
        video_array = np.moveaxis(video_array, 1, 2)
    elif name.lower().endswith(".gif") or name.lower().endswith(".mp4") or name.lower().endswith(".mov"):
        video = np.array(mimread(name))
        if len(video.shape) == 3:
            video = np.array([gray2rgb(frame) for frame in video])
        if video.shape[-1] == 4:
            video = video[..., :3]
        video_array = img_as_float32(video)
    else:
        raise Exception("Unknown file extensions  %s" % name)

    return video_array



# Файл "app\src\ml\datasets\__init__.py":

from .frames_dataset import FramesDataset
from .paired_dataset import PairedDataset



# Файл "app\src\ml\datasets\augmentation\all_transforms.py":

from src.ml.datasets.augmentation.transforms import (
    ColorJitter,
    RandomCrop,
    RandomFlip,
    RandomResize,
    RandomRotation,
)


class AllAugmentationTransform:
    def __init__(
        self, resize_param=None, rotation_param=None, flip_param=None, crop_param=None, jitter_param=None
    ) -> None:
        self.transforms = []

        params = {
            RandomFlip: flip_param,
            RandomRotation: rotation_param,
            RandomResize: resize_param,
            RandomCrop: crop_param,
            ColorJitter: jitter_param,
        }
        for Factory, param in params.items():
            if param:
                self.transforms.append(Factory(**param))

    def __call__(self, clip):
        for t in self.transforms:
            clip = t(clip)
        return clip



# Файл "app\src\ml\datasets\augmentation\utils.py":

import numpy as np
import PIL
from skimage.transform import resize


def is_numpy_clip(clip) -> bool:
    return isinstance(clip[0], np.ndarray)


def is_pil_clip(clip) -> bool:
    return isinstance(clip[0], PIL.Image.Image)


def get_clip_shape(clip):
    if is_numpy_clip(clip):
        return clip[0].shape[:2]
    elif is_pil_clip(clip):
        return clip[0].size[1], clip[0].size[0]
    raise TypeError(f"Unsupported clip type: {type(clip[0])}")


def crop_clip(clip, min_h: int, min_w: int, h: int, w: int):
    if is_numpy_clip(clip):
        return [img[min_h : min_h + h, min_w : min_w + w, :] for img in clip]
    elif is_pil_clip(clip):
        return [img.crop((min_w, min_h, min_w + w, min_h + h)) for img in clip]
    else:
        raise TypeError("Expected numpy.ndarray or PIL.Image" + "but got list of {0}".format(type(clip[0])))


def pad_clip(clip, h: int, w: int):
    im_h, im_w = clip[0].shape[:2]
    pad_h = (0, 0) if h < im_h else ((h - im_h) // 2, (h - im_h + 1) // 2)
    pad_w = (0, 0) if w < im_w else ((w - im_w) // 2, (w - im_w + 1) // 2)
    return np.pad(clip, ((0, 0), pad_h, pad_w, (0, 0)), mode="edge")


def get_resize_sizes(im_h: int, im_w: int, size: int):
    if im_w < im_h:
        ow = size
        oh = int(size * im_h / im_w)
    else:
        oh = size
        ow = int(size * im_w / im_h)
    return oh, ow


def resize_clip(clip, size: int | tuple[int, int], interpolation: str = "bilinear"):
    if isinstance(size, int):
        im_h, im_w = get_clip_shape(clip)
        if (im_w <= im_h and im_w == size) or (im_h <= im_w and im_h == size):
            return clip
        new_h, new_w = get_resize_sizes(im_h, im_w, size)
        size = (new_w, new_h)
    else:
        size = size[1], size[0]

    if is_numpy_clip(clip):
        order = 1 if interpolation == "bilinear" else 0
        return [
            resize(img, size, order=order, preserve_range=True, mode="constant", anti_aliasing=True) for img in clip
        ]
    elif is_pil_clip(clip):
        pil_inter = PIL.Image.BILINEAR if interpolation == "bilinear" else PIL.Image.NEAREST
        return [img.resize(size, pil_inter) for img in clip]
    else:
        raise TypeError(f"Unsupported clip type: {type(clip[0])}")



# Файл "app\src\ml\datasets\augmentation\__init__.py":

from .all_transforms import AllAugmentationTransform



# Файл "app\src\ml\datasets\augmentation\transforms\color_jitter.py":

import random

import numpy as np
import torchvision
from skimage.util import img_as_float, img_as_ubyte
from src.ml.datasets.augmentation.utils import is_numpy_clip, is_pil_clip


class ColorJitter:
    """Randomly change the brightness, contrast and saturation and hue of the clip.
    Args:
        brightness (float): How much to jitter brightness. brightness_factor
                            is chosen uniformly from [max(0, 1 - brightness), 1 + brightness].
        contrast (float): How much to jitter contrast. contrast_factor
                          is chosen uniformly from [max(0, 1 - contrast), 1 + contrast].
        saturation (float): How much to jitter saturation. saturation_factor
                            is chosen uniformly from [max(0, 1 - saturation), 1 + saturation].
        hue(float): How much to jitter hue. hue_factor is chosen uniformly from
                    [-hue, hue]. Should be >=0 and <= 0.5.
    """

    def __init__(self, brightness: float = 0, contrast: float = 0, saturation: float = 0, hue: float = 0) -> None:
        self.brightness = brightness
        self.contrast = contrast
        self.saturation = saturation
        self.hue = hue

    @staticmethod
    def get_params(brightness: float, contrast: float, saturation: float, hue: float):
        return (
            random.uniform(max(0.0, 1 - brightness), 1 + brightness) if brightness > 0 else None,
            random.uniform(max(0.0, 1 - contrast), 1 + contrast) if contrast > 0 else None,
            random.uniform(max(0.0, 1 - saturation), 1 + saturation) if saturation > 0 else None,
            random.uniform(-hue, hue) if hue > 0 else None,
        )

    def __call__(self, clip):
        """
        Args:
            clip (list): list of PIL.Image
        Returns:
            list PIL.Image : list of transformed PIL.Image
        """
        return self.apply_color_jitter(clip, self.brightness, self.contrast, self.saturation, self.hue)

    @staticmethod
    def apply_pipeline(img, transforms):
        for t in transforms:
            img = t(img)
        return img

    @classmethod
    def apply_color_jitter(cls, clip, brightness: float, contrast: float, saturation: float, hue: float) -> list:
        brightness, contrast, saturation, hue = ColorJitter.get_params(brightness, contrast, saturation, hue)
        transforms = []
        if brightness:
            transforms.append(lambda img: torchvision.transforms.functional.adjust_brightness(img, brightness))
        if saturation:
            transforms.append(lambda img: torchvision.transforms.functional.adjust_saturation(img, saturation))
        if hue:
            transforms.append(lambda img: torchvision.transforms.functional.adjust_hue(img, hue))
        if contrast:
            transforms.append(lambda img: torchvision.transforms.functional.adjust_contrast(img, contrast))
        random.shuffle(transforms)

        if is_numpy_clip(clip):
            img_transforms = [img_as_ubyte, torchvision.transforms.ToPILImage()] + transforms + [np.array, img_as_float]
            return [cls.apply_pipeline(img, img_transforms) for img in clip]
        elif is_pil_clip(clip):
            return [cls.apply_pipeline(img, transforms) for img in clip]
        else:
            raise TypeError(f"Unsupported clip type: {type(clip[0])}")



# Файл "app\src\ml\datasets\augmentation\transforms\random_crop.py":

import random

from src.ml.datasets.augmentation.utils import (
    crop_clip,
    is_numpy_clip,
    is_pil_clip,
    pad_clip,
)


class RandomCrop:
    """Extract random crop at the same location for a list of videos.
    Args:
        size (sequence or int): Desired output size for the crop in format (h, w)
    """

    def __init__(self, size: int | tuple[int, int]) -> None:
        self.size = (size, size) if isinstance(size, int) else size

    def __call__(self, clip):
        """
        Args:
            img (PIL.Image or numpy.ndarray): List of videos to be cropped in format (h, w, c) in numpy.ndarray
        Returns:
            PIL.Image or numpy.ndarray: Cropped list of videos
        """
        h, w = self.size
        if is_numpy_clip(clip):
            im_h, im_w, im_c = clip[0].shape
        elif is_pil_clip(clip):
            im_w, im_h = clip[0].size
        else:
            raise TypeError("Expected numpy.ndarray or PIL.Image" + "but got list of {0}".format(type(clip[0])))

        clip = pad_clip(clip, h, w)
        im_h, im_w = clip.shape[1:3]
        x1 = 0 if h == im_h else random.randint(0, im_w - w)
        y1 = 0 if w == im_w else random.randint(0, im_h - h)
        cropped = crop_clip(clip, y1, x1, h, w)

        return cropped



# Файл "app\src\ml\datasets\augmentation\transforms\random_flip.py":

import random

import numpy as np


class RandomFlip:
    def __init__(self, time_flip: bool = False, horizontal_flip: bool = False) -> None:
        self.time_flip = time_flip
        self.horizontal_flip = horizontal_flip

    def __call__(self, clip):
        if random.random() < 0.5 and self.time_flip:
            clip = clip[::-1]
        if random.random() < 0.5 and self.horizontal_flip:
            clip = [np.fliplr(img) for img in clip]
        return clip



# Файл "app\src\ml\datasets\augmentation\transforms\random_resize.py":

import random

from src.ml.datasets.augmentation.utils import (
    is_numpy_clip,
    is_pil_clip,
    resize_clip,
)


class RandomResize:
    """Resizes a list of (H x W x C) numpy.ndarray to the final size.
    The larger the original image is, the more times it takes to interpolate
    Args:
        interpolation (str): Can be one of 'nearest', 'bilinear' defaults to nearest
        ratio (tuple): (widht, height)
    """

    def __init__(self, ratio: tuple[float] = (3.0 / 4.0, 4.0 / 3.0), interpolation: str = "nearest") -> None:
        self.ratio = ratio
        self.interpolation = interpolation

    def __call__(self, clip):
        scaling_factor = random.uniform(self.ratio[0], self.ratio[1])

        if is_numpy_clip(clip):
            im_h, im_w, im_c = clip[0].shape
        elif is_pil_clip(clip):
            im_w, im_h = clip[0].size

        new_w = int(im_w * scaling_factor)
        new_h = int(im_h * scaling_factor)
        new_size = (new_w, new_h)
        resized = resize_clip(clip, new_size, interpolation=self.interpolation)

        return resized



# Файл "app\src\ml\datasets\augmentation\transforms\random_rotation.py":

import random

from skimage.transform import rotate
from src.ml.datasets.augmentation.utils import is_numpy_clip, is_pil_clip


class RandomRotation:
    """Rotate entire clip randomly by a random angle within given bounds.
    Args:
        degrees (sequence or int): Range of degrees to select from
                                   If degrees is a number instead of sequence like (min, max),
                                   the range of degrees, will be (-degrees, +degrees).
    """

    def __init__(self, degrees: int | tuple) -> None:
        if isinstance(degrees, int):
            if degrees < 0:
                raise ValueError("If degrees is a single number," "must be positive")
            degrees = (-degrees, degrees)
        else:
            if len(degrees) != 2:
                raise ValueError("If degrees is a sequence," "it must be of len 2.")

        self.degrees = degrees

    def __call__(self, clip):
        """
        Args:
            clip (PIL.Image or numpy.ndarray): List of videos to be cropped in format (h, w, c) in numpy.ndarray
        Returns:
            PIL.Image or numpy.ndarray: Cropped list of videos
        """
        angle = random.uniform(self.degrees[0], self.degrees[1])
        if is_numpy_clip(clip):
            rotated = [rotate(image=img, angle=angle, preserve_range=True) for img in clip]
        elif is_pil_clip(clip):
            rotated = [img.rotate(angle) for img in clip]
        else:
            raise TypeError("Expected numpy.ndarray or PIL.Image" + "but got list of {0}".format(type(clip[0])))

        return rotated



# Файл "app\src\ml\datasets\augmentation\transforms\__init__.py":

from .color_jitter import ColorJitter
from .random_crop import RandomCrop
from .random_flip import RandomFlip
from .random_resize import RandomResize
from .random_rotation import RandomRotation



# Файл "app\src\ml\modules\__init__.py":




# Файл "app\src\ml\modules\blocks\anti_alias.py":

import torch
import torch.nn.functional as F


class AntiAliasInterpolation2d(torch.nn.Module):
    """Band-limited downsampling with antialiasing for better signal preservation.
    Args:
        channels: Number of input channels
        scale: Scaling factor (must be <= 1.0 for downsampling)
    """

    def __init__(self, channels: int, scale: float) -> None:
        super().__init__()
        if scale > 1.0:
            raise ValueError("Scale factor must be <= 1.0 for anti-aliased downsampling")

        self.scale = scale
        self.groups = channels

        if scale == 1.0:
            return  # Identity operation

        # Calculate optimal Gaussian kernel
        sigma = (1 / scale - 1) / 2
        kernel_size = 2 * round(sigma * 4) + 1
        self.ka = kernel_size // 2
        self.kb = kernel_size - self.ka - 1  # More efficient padding calculation

        # Vectorized kernel creation
        grid = torch.arange(kernel_size, dtype=torch.float32) - (kernel_size - 1) / 2
        x, y = torch.meshgrid(grid, grid, indexing="ij")
        kernel = torch.exp(-(x**2 + y**2) / (2 * sigma**2))
        kernel = kernel / kernel.sum()  # Normalize

        # Register as buffer for proper device handling
        self.register_buffer(
            "weight", kernel.view(1, 1, kernel_size, kernel_size).expand(channels, -1, -1, -1).contiguous()
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        if self.scale == 1.0:
            return x

        x = F.pad(x, (self.ka, self.kb, self.ka, self.kb))
        x = F.conv2d(x, weight=self.weight, groups=self.groups)
        x = F.interpolate(x, scale_factor=(self.scale, self.scale))

        return x



# Файл "app\src\ml\modules\blocks\conv_blocks.py":

import torch.nn.functional as F
from torch import Tensor, nn
from torch.nn import BatchNorm2d


class ResBlock2d(nn.Module):
    """Res block, preserve spatial resolution."""

    def __init__(self, in_features: int, kernel_size: int | tuple[int, int], padding: int | tuple[int, int]) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(in_features, in_features, kernel_size, padding=padding)
        self.conv2 = nn.Conv2d(in_features, in_features, kernel_size, padding=padding)
        self.norm1 = BatchNorm2d(in_features, affine=True)
        self.norm2 = BatchNorm2d(in_features, affine=True)

    def forward(self, x: Tensor) -> Tensor:
        out = F.relu(self.norm1(x))
        out = F.relu(self.norm2(self.conv1(out)))
        return self.conv2(out) + x


class UpBlock2d(nn.Module):
    """Upsampling block for use in decoder."""

    def __init__(
        self, in_features: int, out_features: int, kernel_size: int = 3, padding: int = 1, groups: int = 1
    ) -> None:
        super().__init__()
        self.conv = nn.Conv2d(in_features, out_features, kernel_size, padding=padding, groups=groups)
        self.norm = BatchNorm2d(out_features, affine=True)

    def forward(self, x: Tensor) -> Tensor:
        out = F.interpolate(x, scale_factor=2)
        return F.relu(self.norm(self.conv(out)))


class DownBlock2d(nn.Module):
    """Downsampling block for use in encoder."""

    def __init__(
        self, in_features: int, out_features: int, kernel_size: int = 3, padding: int = 1, groups: int = 1
    ) -> None:
        super().__init__()
        self.conv = nn.Conv2d(in_features, out_features, kernel_size, padding=padding, groups=groups)
        self.norm = BatchNorm2d(out_features, affine=True)
        self.pool = nn.AvgPool2d(kernel_size=(2, 2))

    def forward(self, x: Tensor) -> Tensor:
        return self.pool(F.relu(self.norm(self.conv(x))))


class SameBlock2d(nn.Module):
    """Simple block, preserve spatial resolution."""

    def __init__(
        self,
        in_features: int,
        out_features: int,
        groups: int = 1,
        kernel_size: int | tuple[int, int] = 3,
        padding: int | tuple[int, int] = 1,
    ) -> None:
        super().__init__()
        self.conv = nn.Conv2d(in_features, out_features, kernel_size, padding=padding, groups=groups)
        self.norm = BatchNorm2d(out_features, affine=True)

    def forward(self, x: Tensor) -> Tensor:
        return F.relu(self.norm(self.conv(x)))



# Файл "app\src\ml\modules\blocks\decoder.py":

import torch
from src.ml.modules.blocks.conv_blocks import UpBlock2d
from torch import nn


class Decoder(nn.Module):
    """Hourglass Decoder."""

    def __init__(self, block_expansion: int, in_features: int, num_blocks: int = 3, max_features: int = 256) -> None:
        super().__init__()

        def num_channels(scale):
            return min(max_features, block_expansion * (2**scale))

        self.up_blocks = nn.ModuleList(
            [
                UpBlock2d(
                    in_features=(1 if i == num_blocks - 1 else 2) * num_channels(i + 1), out_features=num_channels(i)
                )
                for i in reversed(range(num_blocks))
            ]
        )

        self.out_filters = block_expansion + in_features

    def forward(self, x):
        out = x.pop()
        for block in self.up_blocks:
            out = block(out)
            skip = x.pop()
            out = torch.cat([out, skip], dim=1)
        return out



# Файл "app\src\ml\modules\blocks\encoder.py":

from src.ml.modules.blocks.conv_blocks import DownBlock2d
from torch import nn


class Encoder(nn.Module):
    """Hourglass Encoder."""

    def __init__(self, block_expansion: int, in_features: int, num_blocks: int = 3, max_features: int = 256) -> None:
        super().__init__()

        def num_channels(scale) -> int:
            return min(max_features, block_expansion * (2**scale))

        self.down_blocks = nn.ModuleList(
            [
                DownBlock2d(in_features=in_features if i == 0 else num_channels(i), out_features=num_channels(i + 1))
                for i in range(num_blocks)
            ]
        )

    def forward(self, x):
        outs = [x]
        for block in self.down_blocks:
            outs.append(block(outs[-1]))
        return outs



# Файл "app\src\ml\modules\blocks\hourglass.py":

from src.ml.modules.blocks.decoder import Decoder
from src.ml.modules.blocks.encoder import Encoder
from torch import Tensor, nn


class Hourglass(nn.Module):
    """Hourglass architecture."""

    def __init__(self, block_expansion: int, in_features: int, num_blocks: int = 3, max_features: int = 256) -> None:
        super().__init__()
        self.encoder = Encoder(block_expansion, in_features, num_blocks, max_features)
        self.decoder = Decoder(block_expansion, in_features, num_blocks, max_features)
        self.out_filters = self.decoder.out_filters

    def forward(self, x: Tensor) -> Tensor:
        return self.decoder(self.encoder(x))



# Файл "app\src\ml\modules\blocks\__init__.py":

from .anti_alias import AntiAliasInterpolation2d
from .conv_blocks import DownBlock2d, ResBlock2d, SameBlock2d, UpBlock2d
from .decoder import Decoder
from .encoder import Encoder
from .hourglass import Hourglass



# Файл "app\src\ml\modules\dense_motion\dense_motion.py":

import torch
import torch.nn.functional as F
from src.ml.modules.blocks import AntiAliasInterpolation2d, Hourglass
from src.ml.modules.utils.utils import kp2gaussian, make_coordinate_grid
from torch import nn


class DenseMotionNetwork(nn.Module):
    """Predicts dense motion from sparse keypoint representations using hourglass architecture."""

    def __init__(
        self,
        block_expansion: int,
        num_blocks: int,
        max_features: int,
        num_kp: int,
        num_channels: int,
        estimate_occlusion_map: bool = False,
        scale_factor: int = 1,
        kp_variance: float = 0.01,
    ) -> None:
        super().__init__()
        self.num_kp = num_kp
        self.scale_factor = scale_factor
        self.kp_variance = kp_variance

        # Input feature calculation (K+1)*(C+1) for heatmaps and deformed features
        in_features = (num_kp + 1) * (num_channels + 1)

        # Core components
        self.hourglass = Hourglass(block_expansion, in_features, num_blocks, max_features)

        # Output layers
        self.mask = nn.Conv2d(self.hourglass.out_filters, num_kp + 1, kernel_size=7, padding=3)
        self.occlusion = (
            nn.Conv2d(self.hourglass.out_filters, 1, kernel_size=7, padding=3) if estimate_occlusion_map else None
        )

        # Preprocessing
        self.down = AntiAliasInterpolation2d(num_channels, scale_factor) if scale_factor != 1 else None

    def create_heatmap_representations(
        self, source_image: torch.Tensor, kp_driving: dict, kp_source: dict
    ) -> torch.Tensor:
        """Generates heatmap representations for keypoint differences."""
        spatial_size = source_image.shape[2:]
        gaussian_driving = kp2gaussian(kp_driving, spatial_size=spatial_size, kp_variance=self.kp_variance)
        gaussian_source = kp2gaussian(kp_source, spatial_size=spatial_size, kp_variance=self.kp_variance)

        # Add background channel
        heatmaps = torch.cat(
            [torch.zeros_like(gaussian_driving[:, :1]), gaussian_driving - gaussian_source], dim=1  # Background
        )

        return heatmaps.unsqueeze(2)  # Add dimension for concatenation

    def create_sparse_motions(self, source_image: torch.Tensor, kp_driving: dict, kp_source: dict) -> torch.Tensor:
        """Computes sparse motion transformations between keypoints."""
        bs, _, h, w = source_image.shape
        device = source_image.device

        # Create base coordinate grid
        identity_grid = make_coordinate_grid((h, w), kp_source["value"].type()).to(device)
        identity_grid = identity_grid.view(1, 1, h, w, 2)

        # Calculate driving to source transformation
        coordinate_grid = identity_grid - kp_driving["value"].view(bs, self.num_kp, 1, 1, 2)

        # Apply Jacobian transformation if available
        if "jacobian" in kp_driving:
            jacobian = torch.matmul(kp_source["jacobian"], torch.inverse(kp_driving["jacobian"]))
            jacobian = jacobian.view(bs, self.num_kp, 1, 1, 2, 2)
            coordinate_grid = torch.einsum("bkhwij,bkhwj->bkhwi", jacobian, coordinate_grid)

        driving_to_source = coordinate_grid + kp_source["value"].view(bs, self.num_kp, 1, 1, 2)

        # Combine with identity grid for background
        return torch.cat([identity_grid.expand(bs, -1, h, w, 2), driving_to_source], dim=1)

    def _compute_deformation(self, sparse_motions: torch.Tensor, mask: torch.Tensor) -> torch.Tensor:
        """Computes final deformation field using predicted masks."""
        return torch.einsum("bkhw,bkhwc->bhwc", mask, sparse_motions.permute(0, 1, 4, 2, 3))

    def create_deformed_source_image(self, source_image: torch.Tensor, sparse_motions: torch.Tensor) -> torch.Tensor:
        """Warps source image using computed sparse motions."""
        bs, _, h, w = source_image.shape

        # Prepare source image for warping
        source_expanded = source_image.unsqueeze(1).expand(-1, self.num_kp + 1, -1, -1, -1)
        source_expanded = source_expanded.reshape(bs * (self.num_kp + 1), -1, h, w)

        # Perform grid sampling
        motions_flat = sparse_motions.view(bs * (self.num_kp + 1), h, w, 2)
        deformed = F.grid_sample(source_expanded, motions_flat, align_corners=True)

        return deformed.view(bs, self.num_kp + 1, -1, h, w)

    def forward(self, source_image: torch.Tensor, kp_driving: dict, kp_source: dict) -> dict[str, torch.Tensor]:
        # Preprocess input
        if self.down:
            source_image = self.down(source_image)

        bs, _, h, w = source_image.shape
        out_dict = dict()

        # Compute motion components
        heatmaps = self.create_heatmap_representations(source_image, kp_driving, kp_source)
        sparse_motions = self.create_sparse_motions(source_image, kp_driving, kp_source)
        deformed_source = self.create_deformed_source_image(source_image, sparse_motions)
        out_dict["sparse_deformed"] = deformed_source

        hourglass_input = torch.cat([heatmaps, deformed_source], dim=2)
        hourglass_input = hourglass_input.view(bs, -1, h, w)
        prediction = self.hourglass(hourglass_input)
        mask = F.softmax(self.mask(prediction), dim=1)
        out_dict["mask"] = mask

        mask = mask.unsqueeze(2)
        sparse_motions = sparse_motions.permute(0, 1, 4, 2, 3)
        deformation = (sparse_motions * mask).sum(dim=1)
        deformation = deformation.permute(0, 2, 3, 1)
        out_dict["deformation"] = deformation

        # Add occlusion map if needed
        if self.occlusion:
            out_dict["occlusion_map"] = torch.sigmoid(self.occlusion(prediction))

        return out_dict



# Файл "app\src\ml\modules\dense_motion\__init__.py":

from .dense_motion import DenseMotionNetwork



# Файл "app\src\ml\modules\discriminator\blocks.py":

import torch
import torch.nn.functional as F
from torch import nn


class DownBlock2d(nn.Module):
    """Simple block for processing video (encoder).
    Args:
        in_features (int): Number of input channels.
        out_features (int): Number of output channels.
        norm (bool): Whether to use InstanceNorm2d.
        kernel_size (int): Size of the convolutional kernel.
        pool (bool): Whether to apply average pooling.
        sn (bool): Whether to apply spectral normalization.
    """

    def __init__(
        self,
        in_features: int,
        out_features: int,
        norm: bool = False,
        kernel_size: int = 4,
        pool: bool = False,
        sn: bool = False,
    ) -> None:
        super().__init__()
        self.conv = nn.Conv2d(in_channels=in_features, out_channels=out_features, kernel_size=kernel_size)
        self.conv = nn.utils.spectral_norm(self.conv) if sn else self.conv
        self.norm: nn.Module = nn.InstanceNorm2d(out_features, affine=True) if norm else nn.Identity()
        self.pool: nn.Module = nn.AvgPool2d(kernel_size=2) if pool else nn.Identity()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.conv(x)
        x = self.norm(x)
        x = F.leaky_relu(x, 0.2)
        x = self.pool(x)
        return x



# Файл "app\src\ml\modules\discriminator\discriminator_full_model.py":

import torch
from src.ml.modules.utils import ImagePyramide
from src.ml.modules.utils.utils import detach_kp
from torch import nn


class DiscriminatorFullModel(torch.nn.Module):
    """Wraps the discriminator forward pass and GAN loss calculation for improved multi-GPU usage."""

    def __init__(self, kp_extractor, generator: nn.Module, discriminator: nn.Module, train_params: dict) -> None:
        super().__init__()
        self.kp_extractor = kp_extractor
        self.generator = generator
        self.discriminator = discriminator
        self.train_params = train_params

        self.scales = self.discriminator.scales
        self.loss_weights = train_params["loss_weights"]

        self.pyramid = ImagePyramide(self.scales, generator.num_channels)
        if torch.cuda.is_available():
            self.pyramid = self.pyramid.cuda()

    def forward(self, x: dict, generated: dict) -> dict[str, float]:
        # Extract pyramids for real and generated frames
        pyramide_real = self.pyramid(x["driving"])
        pyramide_fake = self.pyramid(generated["prediction"].detach())

        # Detach keypoints to stop gradient to generator
        kp_driving_detached = detach_kp(generated["kp_driving"])

        # Run discriminator
        disc_fake = self.discriminator(pyramide_fake, kp=kp_driving_detached)
        disc_real = self.discriminator(pyramide_real, kp=kp_driving_detached)

        # Compute GAN loss (LSGAN formulation)
        disc_loss_total = 0.0
        for scale in self.scales:
            key = f"prediction_map_{scale}"
            real_map = disc_real[key]
            fake_map = disc_fake[key]
            scale_loss = (1 - real_map) ** 2 + fake_map**2
            disc_loss_total += self.loss_weights["discriminator_gan"] * scale_loss.mean()

        return {"disc_gan": disc_loss_total}



# Файл "app\src\ml\modules\discriminator\multi_scale_discriminator.py":

import torch
from src.ml.modules.discriminator.pix2pix_discriminator import Discriminator
from torch import nn


class MultiScaleDiscriminator(nn.Module):
    """Discriminator that processes inputs at multiple spatial scales."""

    def __init__(self, scales=(), **kwargs) -> None:
        super().__init__()
        self.scales = scales

        discs = {}
        for scale in scales:
            discs[str(scale).replace(".", "-")] = Discriminator(**kwargs)
        self.discs = nn.ModuleDict(discs)

    def forward(self, x: dict, kp=None) -> dict[str, torch.Tensor] | list[torch.Tensor]:
        out_dict = {}

        for scale, disc in self.discs.items():
            scale = str(scale).replace("-", ".")
            key = f"prediction_{scale}"

            feature_maps, prediction_map = disc(x[key], kp)

            out_dict[f"feature_maps_{scale}"] = feature_maps
            out_dict[f"prediction_map_{scale}"] = prediction_map

        return out_dict



# Файл "app\src\ml\modules\discriminator\pix2pix_discriminator.py":

import torch
from src.ml.modules.discriminator.blocks import DownBlock2d
from src.ml.modules.utils.utils import kp2gaussian
from torch import nn


class Discriminator(nn.Module):
    """Patch-based discriminator similar to Pix2Pix, with optional keypoint heatmap input."""

    def __init__(
        self,
        num_channels: int = 3,
        block_expansion: int = 64,
        num_blocks: int = 4,
        max_features: int = 512,
        sn: bool = False,
        use_kp: bool = False,
        num_kp: int = 10,
        kp_variance: float = 0.01,
        **_
    ) -> None:
        super().__init__()
        self.use_kp = use_kp
        self.kp_variance = kp_variance

        self.down_blocks = nn.ModuleList()
        for i in range(num_blocks):
            self.down_blocks.append(
                DownBlock2d(
                    in_features=(
                        num_channels + num_kp * use_kp if i == 0 else min(max_features, block_expansion * (2**i))
                    ),
                    out_features=min(max_features, block_expansion * (2 ** (i + 1))),
                    norm=(i != 0),
                    kernel_size=4,
                    pool=(i != num_blocks - 1),
                    sn=sn,
                )
            )

        conv = nn.Conv2d(self.down_blocks[-1].conv.out_channels, out_channels=1, kernel_size=1)
        self.conv = nn.utils.spectral_norm(conv) if sn else conv

    def forward(self, x: torch.Tensor, kp: dict | None = None) -> tuple[list[torch.Tensor], torch.Tensor]:
        """
        Forward pass.
        Returns:
            - List of intermediate feature maps (for multiscale loss).
            - Final prediction map.
        """
        if self.use_kp:
            heatmap = kp2gaussian(kp, x.shape[2:], self.kp_variance)
            x = torch.cat([x, heatmap], dim=1)

        feature_maps = []
        for down_block in self.down_blocks:
            x = down_block(x)
            feature_maps.append(x)

        prediction_map = self.conv(x)

        return feature_maps, prediction_map



# Файл "app\src\ml\modules\discriminator\__init__.py":

from .multi_scale_discriminator import MultiScaleDiscriminator



# Файл "app\src\ml\modules\generator\generator_full_model.py":

import torch
from src.ml.modules.generator.vgg19 import Vgg19
from src.ml.modules.utils import ImagePyramide, Transform
from src.ml.modules.utils.utils import detach_kp
from torch import nn


class GeneratorFullModel(nn.Module):
    """Merges generator-related updates into a single model to better support multi-GPU training."""

    def __init__(self, kp_extractor, generator: nn.Module, discriminator: nn.Module, train_params: dict) -> None:
        super().__init__()
        self.kp_extractor = kp_extractor
        self.generator = generator
        self.discriminator = discriminator
        self.train_params = train_params

        self.scales = train_params["scales"]
        self.disc_scales = self.discriminator.scales
        self.loss_weights = train_params["loss_weights"]

        self.pyramid = ImagePyramide(self.scales, generator.num_channels)
        if torch.cuda.is_available():
            self.pyramid = self.pyramid.cuda()

        if any(self.loss_weights["perceptual"]):
            self.vgg = Vgg19()
            if torch.cuda.is_available():
                self.vgg = self.vgg.cuda()

    def forward(self, x: dict) -> tuple[dict, dict]:
        # Keypoint extraction
        kp_source = self.kp_extractor(x["source"])
        kp_driving = self.kp_extractor(x["driving"])

        generated = self.generator(x["source"], kp_source=kp_source, kp_driving=kp_driving)
        generated.update({"kp_source": kp_source, "kp_driving": kp_driving})

        loss_values = {}

        # Pyramids
        pyramide_real = self.pyramid(x["driving"])
        pyramide_fake = self.pyramid(generated["prediction"])

        # Perceptual loss
        if any(self.loss_weights["perceptual"]):
            perceptual_loss = 0
            for scale in self.scales:
                x_vgg = self.vgg(pyramide_fake[f"prediction_{scale}"])
                y_vgg = self.vgg(pyramide_real[f"prediction_{scale}"])
                for i, weight in enumerate(self.loss_weights["perceptual"]):
                    perceptual_loss += weight * torch.abs(x_vgg[i] - y_vgg[i].detach()).mean()
            loss_values["perceptual"] = perceptual_loss

        # --- GAN + Feature Matching ---
        if self.loss_weights["generator_gan"] != 0:
            detached_kp_driving = detach_kp(kp_driving)
            disc_maps_fake = self.discriminator(pyramide_fake, kp=detached_kp_driving)
            disc_maps_real = self.discriminator(pyramide_real, kp=detached_kp_driving)

            value_total = 0
            for scale in self.disc_scales:
                key = f"prediction_map_{scale}"
                value = ((1 - disc_maps_fake[key]) ** 2).mean()
                value_total += self.loss_weights["generator_gan"] * value
            loss_values["gen_gan"] = value_total

            if any(self.loss_weights["feature_matching"]):
                fm_loss = 0
                for scale in self.disc_scales:
                    key = f"feature_maps_{scale}"
                    for i, (real_f, gen_f) in enumerate(zip(disc_maps_real[key], disc_maps_fake[key])):
                        weight = self.loss_weights["feature_matching"][i]
                        if weight != 0:
                            fm_loss += weight * torch.abs(real_f - gen_f).mean()
                loss_values["feature_matching"] = value_total

        # --- Equivariance losses ---
        eq_val_w = self.loss_weights["equivariance_value"]
        eq_jac_w = self.loss_weights["equivariance_jacobian"]

        if eq_val_w + eq_jac_w != 0:
            transform = Transform(x["driving"].shape[0], **self.train_params["transform_params"])
            transformed_frame = transform.transform_frame(x["driving"])
            transformed_kp = self.kp_extractor(transformed_frame)

            generated.update({"transformed_frame": transformed_frame, "transformed_kp": transformed_kp})

            # Value loss part
            if eq_val_w != 0:
                warped = transform.warp_coordinates(transformed_kp["value"])
                val_loss = torch.abs(kp_driving["value"] - warped).mean()
                loss_values["equivariance_value"] = eq_val_w * val_loss

            # jacobian loss part
            if eq_jac_w != 0:
                jacobian_transformed = torch.matmul(
                    transform.jacobian(transformed_kp["value"]), transformed_kp["jacobian"]
                )
                normed = torch.matmul(torch.inverse(kp_driving["jacobian"]), jacobian_transformed)
                identity = torch.eye(2).view(1, 1, 2, 2).type(normed.type())
                jac_loss = torch.abs(identity - normed).mean()
                loss_values["equivariance_jacobian"] = eq_jac_w * jac_loss

        return loss_values, generated



# Файл "app\src\ml\modules\generator\occlusion_aware_generator.py":

import torch
import torch.nn.functional as F
from src.ml.modules.blocks import (
    DownBlock2d,
    ResBlock2d,
    SameBlock2d,
    UpBlock2d,
)
from src.ml.modules.dense_motion import DenseMotionNetwork
from torch import nn


class OcclusionAwareGenerator(nn.Module):
    """
    Generator that transforms source image according to movement trajectories induced by keypoints.
    Follows the Johnson architecture.
    """

    def __init__(
        self,
        num_channels: int,
        num_kp: int,
        block_expansion: int,
        max_features: int,
        num_down_blocks: int,
        num_bottleneck_blocks: int,
        estimate_occlusion_map: bool = False,
        dense_motion_params: dict = None,
        estimate_jacobian: bool = False,
    ) -> None:
        super().__init__()

        # Dense Motion Network setup
        self.dense_motion_network = (
            DenseMotionNetwork(
                num_kp=num_kp,
                num_channels=num_channels,
                estimate_occlusion_map=estimate_occlusion_map,
                **dense_motion_params
            )
            if dense_motion_params
            else None
        )

        # First block: SameBlock2d
        self.first = SameBlock2d(num_channels, block_expansion, kernel_size=(7, 7), padding=(3, 3))

        # Downsampling blocks
        self.down_blocks = nn.ModuleList(
            [
                DownBlock2d(
                    min(max_features, block_expansion * (2**i)), min(max_features, block_expansion * (2 ** (i + 1)))
                )
                for i in range(num_down_blocks)
            ]
        )

        # Upsampling blocks
        self.up_blocks = nn.ModuleList(
            [
                UpBlock2d(
                    min(max_features, block_expansion * (2 ** (num_down_blocks - i))),
                    min(max_features, block_expansion * (2 ** (num_down_blocks - i - 1))),
                )
                for i in range(num_down_blocks)
            ]
        )

        # Bottleneck ResBlocks
        self.bottleneck = torch.nn.Sequential()
        in_features = min(max_features, block_expansion * (2**num_down_blocks))
        for i in range(num_bottleneck_blocks):
            self.bottleneck.add_module("r" + str(i), ResBlock2d(in_features, kernel_size=(3, 3), padding=(1, 1)))

        # Final output layer
        self.final = nn.Conv2d(block_expansion, num_channels, kernel_size=(7, 7), padding=(3, 3))

        # Store options for occlusion map and channels
        self.estimate_occlusion_map = estimate_occlusion_map
        self.num_channels = num_channels

    @staticmethod
    def deform_input(inp, deformation):
        _, h_old, w_old, _ = deformation.shape
        _, _, h, w = inp.shape
        if h_old != h or w_old != w:
            deformation = deformation.permute(0, 3, 1, 2)
            deformation = F.interpolate(deformation, size=(h, w), mode="bilinear")
            deformation = deformation.permute(0, 2, 3, 1)
        return F.grid_sample(inp, deformation, align_corners=True)

    def forward(self, source_image, kp_driving, kp_source) -> dict[str, torch.Tensor]:
        # Encoding (downsampling) part
        out = self.first(source_image)
        for i in range(len(self.down_blocks)):
            out = self.down_blocks[i](out)

        output_dict = {}

        # Transforming feature representation according to deformation and occlusion
        if self.dense_motion_network:
            dense_motion = self.dense_motion_network(
                source_image=source_image, kp_driving=kp_driving, kp_source=kp_source
            )
            output_dict.update(
                {
                    "mask": dense_motion["mask"],
                    "sparse_deformed": dense_motion["sparse_deformed"],
                }
            )

            if "occlusion_map" in dense_motion:
                occlusion_map = dense_motion["occlusion_map"]
                output_dict["occlusion_map"] = occlusion_map
            else:
                occlusion_map = None
            deformation = dense_motion["deformation"]
            out = self.deform_input(out, deformation)

            if occlusion_map is not None:
                if out.shape[2:] != occlusion_map.shape[2:]:
                    occlusion_map = F.interpolate(occlusion_map, size=out.shape[2:], mode="bilinear")
                out = out * occlusion_map

            output_dict["deformed"] = self.deform_input(source_image, deformation)

        # Decoding part
        out = self.bottleneck(out)
        for up_block in self.up_blocks:
            out = up_block(out)

        # Final prediction and sigmoid activation
        out = self.final(out)
        out = F.sigmoid(out)

        output_dict["prediction"] = out

        return output_dict



# Файл "app\src\ml\modules\generator\vgg19.py":

import torch
from torchvision import models


class Vgg19(torch.nn.Module):
    """VGG19 network for perceptual loss as described in Sec 3.3."""

    def __init__(self, requires_grad: bool = False) -> None:
        super().__init__()
        vgg_features = models.vgg19(pretrained=True).features

        # Define VGG slices corresponding to relu1_2, relu2_2, relu3_2, relu4_2, relu5_2
        self.slices = torch.nn.ModuleList(
            [
                vgg_features[:2],  # relu1_2
                vgg_features[2:7],  # relu2_2
                vgg_features[7:12],  # relu3_2
                vgg_features[12:21],  # relu4_2
                vgg_features[21:30],  # relu5_2
            ]
        )

        # Normalization buffers (not learnable, no grad)
        self.register_buffer("mean", torch.tensor([0.485, 0.456, 0.406]).view(1, 3, 1, 1))
        self.register_buffer("std", torch.tensor([0.229, 0.224, 0.225]).view(1, 3, 1, 1))

        if not requires_grad:
            for param in self.parameters():
                param.requires_grad = False

    def forward(self, x: torch.Tensor) -> list:
        x = (x - self.mean) / self.std
        features = []
        for slice in self.slices:
            x = slice(x)
            features.append(x)
        return features



# Файл "app\src\ml\modules\generator\__init__.py":

from .generator_full_model import GeneratorFullModel
from .occlusion_aware_generator import OcclusionAwareGenerator



# Файл "app\src\ml\modules\keypoint_detector\keypoint_detector.py":

import torch
import torch.nn.functional as F
from src.ml.modules.blocks import AntiAliasInterpolation2d, Hourglass
from src.ml.modules.utils.utils import gaussian2kp
from torch import Tensor, nn


class KPDetector(nn.Module):
    """Detects keypoints and (optionally) estimates a Jacobian matrix near each keypoint."""

    def __init__(
        self,
        block_expansion: int,
        num_kp: int,
        num_channels: int,
        max_features: int,
        num_blocks: int,
        temperature: float,
        estimate_jacobian: bool = False,
        scale_factor: float = 1.0,
        single_jacobian_map: bool = False,
        pad: str | int | tuple[int, int] = 0,
    ) -> None:
        super().__init__()
        self.temperature = temperature
        self.scale_factor = scale_factor
        self.estimate_jacobian = estimate_jacobian
        self.num_kp = num_kp

        # Backbone feature extractor
        self.predictor = Hourglass(
            block_expansion, in_features=num_channels, max_features=max_features, num_blocks=num_blocks
        )

        # Keypoint heatmap prediction
        self.kp = nn.Conv2d(in_channels=self.predictor.out_filters, out_channels=num_kp, kernel_size=7, padding=pad)

        # Optional Jacobian estimation
        if estimate_jacobian:
            self.num_jacobian_maps = 1 if single_jacobian_map else num_kp
            self.jacobian = nn.Conv2d(
                in_channels=self.predictor.out_filters,
                out_channels=4 * self.num_jacobian_maps,
                kernel_size=7,
                padding=pad,
            )
            self.jacobian.weight.data.zero_()
            self.jacobian.bias.data.copy_(torch.tensor([1, 0, 0, 1] * self.num_jacobian_maps, dtype=torch.float))
        else:
            self.jacobian = None

        self.down = AntiAliasInterpolation2d(num_channels, scale_factor) if scale_factor != 1 else None

    def forward(self, x) -> dict[str, Tensor]:
        if self.down:
            x = self.down(x)

        feature_map = self.predictor(x)
        heatmap = self.kp(feature_map)

        B, K, H, W = heatmap.shape
        heatmap_flat = heatmap.view(B, K, -1)
        heatmap = F.softmax(heatmap_flat / self.temperature, dim=2).view(B, K, H, W)

        out = gaussian2kp(heatmap)

        if self.jacobian:
            jacobian_map = self.jacobian(feature_map)  # shape: [B, 4*num_maps, H, W]
            jacobian_map = jacobian_map.view(B, self.num_jacobian_maps, 4, H, W)

            weighted = (heatmap.unsqueeze(2) * jacobian_map).view(B, K, 4, -1)
            jacobian = weighted.sum(dim=-1).view(B, K, 2, 2)
            out["jacobian"] = jacobian

        return out



# Файл "app\src\ml\modules\keypoint_detector\__init__.py":

from .keypoint_detector import KPDetector



# Файл "app\src\ml\modules\utils\image_pyramide.py":

import torch
from src.ml.modules.blocks import AntiAliasInterpolation2d
from torch import nn


class ImagePyramide(torch.nn.Module):
    """Creates an image pyramid for computing pyramidal perceptual loss.
    Args:
        scales: List of scale factors for the pyramid (e.g., [1.0, 0.5, 0.25])
        num_channels: Number of channels in input images
    """

    def __init__(self, scales: list[float], num_channels: int) -> None:
        super().__init__()

        # Validate input scales
        if not scales or any(scale <= 0 for scale in scales):
            raise ValueError("Scales must be positive values")

        # Create downsampling modules
        self.downs = nn.ModuleDict(
            {f"scale_{scale}": AntiAliasInterpolation2d(num_channels, scale) for scale in scales}
        )

        # Cache scale names for faster forward pass
        self.scale_names = list(self.downs.keys())
        self.output_keys = [f'prediction_{scale.split("_")[1]}' for scale in self.scale_names]

    def forward(self, x: torch.Tensor) -> dict[str, torch.Tensor]:
        """Process input image through the pyramid.
        Returns:
            Dictionary with keys like 'prediction_1.0', 'prediction_0.5' etc.
        """
        return {key: down_module(x) for key, down_module in zip(self.output_keys, self.downs.values())}



# Файл "app\src\ml\modules\utils\transform.py":

import torch
import torch.nn.functional as F
from src.ml.modules.utils.utils import make_coordinate_grid
from torch.autograd import grad


class Transform:
    """Thin Plate Spline (TPS) transformation for equivariance constraints with both affine and non-linear components.
    Args:
        bs: Batch size
        sigma_affine: Standard deviation for affine transformation parameters
        sigma_tps: Standard deviation for TPS control point parameters (optional)
        points_tps: Number of control points along each axis (optional)
    """

    def __init__(self, bs: int, **kwargs) -> None:
        self.bs = bs

        # Initialize random affine transformation parameters
        noise = torch.normal(mean=0, std=kwargs["sigma_affine"] * torch.ones([bs, 2, 3]))
        self.theta = noise + torch.eye(2, 3).view(1, 2, 3)

        # Initialize TPS transformation if parameters provided
        self.tps = ("sigma_tps" in kwargs) and ("points_tps" in kwargs)
        if self.tps:
            self.control_points = make_coordinate_grid((kwargs["points_tps"], kwargs["points_tps"]), type=noise.type())
            self.control_points = self.control_points.unsqueeze(0)
            self.control_params = torch.normal(
                mean=0, std=kwargs["sigma_tps"] * torch.ones([bs, 1, kwargs["points_tps"] ** 2])
            )

    def transform_frame(self, frame: torch.Tensor) -> torch.Tensor:
        """Apply transformation to input frame.
        Args:
            frame: Input tensor of shape [bs, C, H, W]
        Returns:
            Transformed frame of same shape
        """
        grid = make_coordinate_grid(frame.shape[2:], type=frame.type()).unsqueeze(0)
        grid = grid.view(1, frame.shape[2] * frame.shape[3], 2)
        warped_grid = self.warp_coordinates(grid).view(self.bs, *frame.shape[2:], 2)
        return F.grid_sample(frame, warped_grid, padding_mode="reflection", align_corners=True)

    def warp_coordinates(self, coordinates: torch.Tensor) -> torch.Tensor:
        """Apply both affine and TPS transformations to coordinates.
        Args:
            coordinates: Tensor of shape [bs, N, 2]
        Returns:
            Transformed coordinates of same shape
        """
        # Apply affine transformation
        transformed = self._apply_affine_transform(coordinates)

        # Apply TPS transformation if enabled
        if self.tps:
            transformed = self._apply_tps_transform(transformed, coordinates)

        return transformed

    def _apply_affine_transform(self, coordinates: torch.Tensor) -> torch.Tensor:
        """Apply affine transformation to coordinates."""
        # Efficient affine transform using einsum
        return torch.einsum(
            "bni,bij->bnj",
            torch.cat([coordinates, torch.ones_like(coordinates[..., :1])], dim=-1),
            self.theta.type_as(coordinates),
        )

    def _apply_tps_transform(self, transformed: torch.Tensor, coordinates: torch.Tensor) -> torch.Tensor:
        """Apply Thin Plate Spline non-linear transformation."""
        # Calculate distances between coordinates and control points
        diff = coordinates.unsqueeze(2) - self.control_points.type_as(coordinates).view(1, 1, -1, 2)
        distances = torch.norm(diff, p=1, dim=-1)  # L1 distance

        # Compute TPS radial basis function
        result = distances**2 * torch.log(distances + 1e-6)
        result = (result * self.control_params.type_as(coordinates)).sum(dim=2)

        return transformed + result.unsqueeze(-1)

    def jacobian(self, coordinates: torch.Tensor) -> torch.Tensor:
        new_coordinates = self.warp_coordinates(coordinates)
        grad_x = grad(new_coordinates[..., 0].sum(), coordinates, create_graph=True)
        grad_y = grad(new_coordinates[..., 1].sum(), coordinates, create_graph=True)
        jacobian = torch.cat([grad_x[0].unsqueeze(-2), grad_y[0].unsqueeze(-2)], dim=-2)
        return jacobian



# Файл "app\src\ml\modules\utils\utils.py":

import torch


def kp2gaussian(kp: dict, spatial_size: tuple[int, int], kp_variance: float) -> torch.Tensor:
    """Converts keypoints to Gaussian heatmaps with optimized tensor operations."""
    mean = kp["value"]
    coordinate_grid = make_coordinate_grid(spatial_size, mean.type()).view(1, 1, *spatial_size, 2)

    # Expand dimensions for broadcasting
    mean = mean.view(*mean.shape[:2], 1, 1, 2)
    diff = coordinate_grid - mean
    return torch.exp(-0.5 * (diff.pow(2).sum(-1) / kp_variance))


def gaussian2kp(heatmap):
    """Extract the mean and from a heatmap."""
    shape = heatmap.shape
    heatmap = heatmap.unsqueeze(-1)
    grid = make_coordinate_grid(shape[2:], heatmap.type()).unsqueeze_(0).unsqueeze_(0)
    value = (heatmap * grid).sum(dim=(2, 3))
    kp = {"value": value}
    return kp


def detach_kp(kp):
    return {key: value.detach() for key, value in kp.items()}


def make_coordinate_grid(spatial_size: tuple[int, int], type) -> torch.Tensor:
    """Creates normalized grid coordinates with modern PyTorch features."""
    h, w = spatial_size
    x = torch.arange(w).type(type)
    y = torch.arange(h).type(type)

    x = 2 * (x / (w - 1)) - 1
    y = 2 * (y / (h - 1)) - 1

    yy = y.view(-1, 1).repeat(1, w)
    xx = x.view(1, -1).repeat(h, 1)

    meshed = torch.cat([xx.unsqueeze_(2), yy.unsqueeze_(2)], 2)

    return meshed



# Файл "app\src\ml\modules\utils\__init__.py":

from .image_pyramide import ImagePyramide
from .transform import Transform



# Файл "app\src\ml\runners\animation.py":

from src.ml.datasets import FramesDataset
from src.ml.runners.base import BaseRunner
from src.ml.services.animation import AnimationService


class AnimationRunner(BaseRunner):
    def __init__(self, args, log):
        super().__init__(args, log)
        self.animation_service = AnimationService()

    def run(self):
        dataset = FramesDataset(is_train=False, **self.config["dataset_params"])
        self.log.info("Animation started...")
        self.animation_service.animate(
            self.config, self.generator, self.kp_detector, self.args.checkpoint, self.log_dir, dataset
        )



# Файл "app\src\ml\runners\base.py":

from abc import ABC, abstractmethod
from argparse import Namespace
from logging import Logger

from src.ml.services.model import ModelService


class BaseRunner(ABC):
    def __init__(self, args: Namespace, log: Logger):
        self.args = args
        self.log = log
        self.device_ids = args.device_ids
        self.verbose = args.verbose

        model_service = ModelService(args.configs, args.checkpoint, args.log_dir, cpu=args.cpu)

        self.config = model_service.config
        self.log_dir = model_service.log_dir

        self.generator, self.discriminator, self.kp_detector = model_service.init_training_models(self.device_ids)

    @abstractmethod
    def run(self):
        pass



# Файл "app\src\ml\runners\reconstruction.py":

from src.ml.datasets import FramesDataset
from src.ml.runners.base import BaseRunner
from src.ml.services.reconstruction import ReconstructionService


class ReconstructionRunner(BaseRunner):
    def run(self):
        dataset = FramesDataset(is_train=False, **self.config["dataset_params"])
        self.log.info("Reconstruction started...")
        ReconstructionService.reconstruction(
            self.config, self.generator, self.kp_detector, self.args.checkpoint, self.log_dir, dataset
        )



# Файл "app\src\ml\runners\training.py":

from src.ml.datasets import FramesDataset
from src.ml.runners.base import BaseRunner
from src.ml.services.training import TrainingService


class TrainingRunner(BaseRunner):
    def run(self):
        dataset = FramesDataset(is_train=True, **self.config["dataset_params"])
        self.log.info("Training started...")
        TrainingService.train(
            self.config,
            self.generator,
            self.discriminator,
            self.kp_detector,
            self.args.checkpoint,
            self.log_dir,
            dataset,
            self.device_ids,
        )



# Файл "app\src\ml\runners\__init__.py":

from .animation import AnimationRunner
from .reconstruction import ReconstructionRunner
from .training import TrainingRunner



# Файл "app\src\ml\services\animation.py":

import os

import numpy as np
import torch
from scipy.spatial import ConvexHull
from src.ml.datasets import PairedDataset
from src.ml.datasets.replicate import DataParallelWithCallback
from src.ml.services.logging import LoggingService
from src.ml.services.visualization import VisualizationService
from torch.utils.data import DataLoader
from tqdm import tqdm


class AnimationService:
    """Service for generating animations using keypoint detection and image generation."""

    @classmethod
    def make_animation(
        cls,
        source_image: np.ndarray,
        driving_video: list[np.ndarray],
        generator: torch.nn.Module,
        kp_detector: torch.nn.Module,
        relative: bool = True,
        adapt_movement_scale: bool = True,
        cpu: bool = False,
    ) -> list[np.ndarray]:
        """
        Generate fomm from source image and driving video.
        Args:
            source_image: Source image (H, W, C)
            driving_video: Driving video frames (T, H, W, C)
            generator: Image generator model
            kp_detector: Keypoint detector model
            relative: Use relative movement
            adapt_movement_scale: Adapt movement scale
            cpu: Force CPU execution
        Returns:
            List of predicted frames
        """
        device = torch.device("cpu") if cpu else torch.device("cuda")

        with torch.no_grad():
            # Convert inputs to tensors
            source = cls._image_to_tensor(source_image).to(device)
            driving = cls._video_to_tensor(driving_video).to(device)

            # Get keypoints
            kp_source = kp_detector(source)
            kp_driving_initial = kp_detector(driving[:, :, 0])

            # Process each frame
            predictions = []
            for frame_idx in tqdm(range(driving.shape[2]), desc="Generating fomm"):
                driving_frame = driving[:, :, frame_idx]
                kp_driving = kp_detector(driving_frame)

                kp_norm = cls.normalize_kp(
                    kp_source=kp_source,
                    kp_driving=kp_driving,
                    kp_driving_initial=kp_driving_initial,
                    use_relative_movement=relative,
                    use_relative_jacobian=relative,
                    adapt_movement_scale=adapt_movement_scale,
                )

                out = generator(source, kp_source=kp_source, kp_driving=kp_norm)
                predictions.append(cls._tensor_to_image(out["prediction"]))

        return predictions

    @staticmethod
    def _image_to_tensor(image: np.ndarray) -> torch.Tensor:
        """Convert numpy image to tensor."""
        return torch.from_numpy(image[np.newaxis].astype(np.float32)).permute(0, 3, 1, 2)

    @staticmethod
    def _tensor_to_image(tensor: torch.Tensor) -> np.ndarray:
        """Convert tensor to numpy image."""
        return np.transpose(tensor.data.cpu().numpy(), [0, 2, 3, 1])[0]

    @staticmethod
    def _video_to_tensor(video: list[np.ndarray]) -> torch.Tensor:
        """Convert numpy video to tensor."""
        return torch.from_numpy(np.array(video)[np.newaxis].astype(np.float32)).permute(0, 4, 1, 2, 3)

    @staticmethod
    def animate(
        config: dict,
        generator: torch.nn.Module,
        kp_detector: torch.nn.Module,
        checkpoint: str,
        log_dir: str,
        dataset: PairedDataset,
        imageio=None,
    ) -> None:
        """
        Main fomm pipeline with visualization and saving.
        Args:
            config: Configuration dictionary
            generator: Image generator model
            kp_detector: Keypoint detector model
            checkpoint: Path to model checkpoint
            log_dir: Directory to save outputs
            dataset: Dataset for fomm
            imageio: ImageIO instance for saving
        """
        # Setup directories
        log_dir = os.path.join(log_dir, "services")
        png_dir = os.path.join(log_dir, "png")
        os.makedirs(png_dir, exist_ok=True)

        # Load checkpoint
        if not checkpoint:
            raise ValueError("Checkpoint must be specified for fomm mode")
        LoggingService.load_cpk(checkpoint, generator=generator, kp_detector=kp_detector)

        # Prepare models
        if torch.cuda.is_available():
            generator = DataParallelWithCallback(generator)
            kp_detector = DataParallelWithCallback(kp_detector)

        generator.eval()
        kp_detector.eval()

        # Create dataset and dataloader
        animate_params = config["animate_params"]
        dataset = PairedDataset(initial_dataset=dataset, number_of_pairs=animate_params["num_pairs"])
        dataloader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=2)

        # Initialize visualizer
        visualizer = VisualizationService(**config["visualizer_params"])

        # Process each pair
        for x in tqdm(dataloader, desc="Animating dataset"):
            with torch.no_grad():
                predictions, visualizations = [], []
                driving_video = x["driving_video"]
                source_frame = x["source_video"][:, :, 0, :, :]

                # Get keypoints
                kp_source = kp_detector(source_frame)
                kp_driving_initial = kp_detector(driving_video[:, :, 0])

                # Process each frame
                for frame_idx in range(driving_video.shape[2]):
                    driving_frame = driving_video[:, :, frame_idx]
                    kp_driving = kp_detector(driving_frame)

                    kp_norm = AnimationService.normalize_kp(
                        kp_source=kp_source,
                        kp_driving=kp_driving,
                        kp_driving_initial=kp_driving_initial,
                        **animate_params["normalization_params"],
                    )

                    out = generator(source_frame, kp_source=kp_source, kp_driving=kp_norm)

                    # Prepare outputs
                    out.update({"kp_driving": kp_driving, "kp_source": kp_source, "kp_norm": kp_norm})
                    del out["sparse_deformed"]

                    # Save results
                    predictions.append(AnimationService._tensor_to_image(out["prediction"]))
                    visualizations.append(visualizer.visualize(source=source_frame, driving=driving_frame, out=out))

                # Save outputs
                result_name = f"{x['driving_name'][0]}-{x['source_name'][0]}"
                predictions = np.concatenate(predictions, axis=1)

                imageio.imsave(
                    os.path.join(png_dir, f"{result_name}.png"),
                    (255 * predictions).astype(np.uint8),
                )

                imageio.mimsave(
                    os.path.join(log_dir, f"{result_name}{animate_params['format']}"),
                    visualizations,
                )

    @classmethod
    def normalize_kp(
        cls,
        kp_source: dict[str, torch.Tensor],
        kp_driving: dict[str, torch.Tensor],
        kp_driving_initial: dict[str, torch.Tensor],
        adapt_movement_scale: bool = False,
        use_relative_movement: bool = False,
        use_relative_jacobian: bool = False,
    ) -> dict[str, torch.Tensor]:
        """
        Normalize keypoints between source and driving frames.
        Args:
            kp_source: Source keypoints
            kp_driving: Driving keypoints
            kp_driving_initial: Initial driving keypoints
            adapt_movement_scale: Adjust for scale differences
            use_relative_movement: Use relative movement
            use_relative_jacobian: Use relative jacobian
        Returns:
            Normalized keypoints
        """
        kp_new = kp_driving.copy()

        if adapt_movement_scale:
            scale = cls._calculate_movement_scale(kp_source, kp_driving_initial)
        else:
            scale = 1.0

        if use_relative_movement:
            kp_value_diff = (kp_driving["value"] - kp_driving_initial["value"]) * scale
            kp_new["value"] = kp_value_diff + kp_source["value"]

            if use_relative_jacobian:
                jacobian_diff = torch.matmul(kp_driving["jacobian"], torch.inverse(kp_driving_initial["jacobian"]))
                kp_new["jacobian"] = torch.matmul(jacobian_diff, kp_source["jacobian"])

        return kp_new

    @staticmethod
    def _calculate_movement_scale(
        kp_source: dict[str, torch.Tensor], kp_driving_initial: dict[str, torch.Tensor]
    ) -> float:
        """Calculate movement scale based on convex hull areas."""
        source_area = ConvexHull(kp_source["value"][0].cpu().numpy()).volume
        driving_area = ConvexHull(kp_driving_initial["value"][0].cpu().numpy()).volume
        return np.sqrt(source_area) / np.sqrt(driving_area)



# Файл "app\src\ml\services\logging.py":

import collections
import logging
import os
import sys

import imageio
import numpy as np
import torch
from src.ml.services.visualization import VisualizationService


class LoggingService:
    def __init__(
        self,
        log_dir: str,
        log_file_name: str = "log.txt",
        checkpoint_freq: int = 100,
        visualizer_params=None,
        zfill_num: int = 8,
    ) -> None:
        self.loss_list = []
        self.cpk_dir = log_dir
        self.visualizations_dir = os.path.join(log_dir, "train-vis")
        os.makedirs(self.visualizations_dir, exist_ok=True)
        self.log_file = open(os.path.join(log_dir, log_file_name), "a")
        self.zfill_num = zfill_num
        self.visualizer = VisualizationService(**visualizer_params)
        self.checkpoint_freq = checkpoint_freq
        self.epoch = 0
        self.best_loss = float("inf")
        self.names = None
        self.models = None

    def log_scores(self, loss_names) -> None:
        loss_mean = np.array(self.loss_list).mean(axis=0)

        loss_string = "; ".join(["%s - %.5f" % (name, value) for name, value in zip(loss_names, loss_mean)])
        loss_string = str(self.epoch).zfill(self.zfill_num) + ") " + loss_string

        print(loss_string, file=self.log_file)
        self.loss_list = []
        self.log_file.flush()

    def visualize_rec(self, inp, out) -> None:
        image = self.visualizer.visualize(inp["driving"], inp["source"], out)
        imageio.imsave(
            os.path.join(self.visualizations_dir, "%s-rec.png" % str(self.epoch).zfill(self.zfill_num)), image
        )

    def save_cpk(self, emergent: bool = False) -> None:
        cpk = {k: v.state_dict() for k, v in self.models.items()}
        cpk["epoch"] = self.epoch
        cpk_path = os.path.join(self.cpk_dir, "%s-checkpoint.pth.tar" % str(self.epoch).zfill(self.zfill_num))
        if not (os.path.exists(cpk_path) and emergent):
            torch.save(cpk, cpk_path)

    @staticmethod
    def load_cpk(
        checkpoint_path: str,
        generator=None,
        discriminator=None,
        kp_detector=None,
        optimizer_generator=None,
        optimizer_discriminator=None,
        optimizer_kp_detector=None,
    ):
        log = LoggingService.setup_logger(__name__)
        checkpoint = torch.load(checkpoint_path)
        if generator:
            generator.load_state_dict(checkpoint["generator"])
        if kp_detector:
            kp_detector.load_state_dict(checkpoint["kp_detector"])
        if discriminator:
            try:
                discriminator.load_state_dict(checkpoint["discriminator"])
            except:
                log.error("No discriminator in the state-dict. Dicriminator will be randomly initialized")
        if optimizer_generator:
            optimizer_generator.load_state_dict(checkpoint["optimizer_generator"])
        if optimizer_discriminator:
            try:
                optimizer_discriminator.load_state_dict(checkpoint["optimizer_discriminator"])
            except RuntimeError:
                log.error("No discriminator optimizer in the state-dict. Optimizer will be not initialized")
        if optimizer_kp_detector:
            optimizer_kp_detector.load_state_dict(checkpoint["optimizer_kp_detector"])

        return checkpoint["epoch"]

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        if "models" in self.__dict__:
            self.save_cpk()
        self.log_file.close()

    def log_iter(self, losses) -> None:
        losses = collections.OrderedDict(losses.items())
        if self.names is None:
            self.names = list(losses.keys())
        self.loss_list.append(list(losses.values()))

    def log_epoch(self, epoch, models, inp, out) -> None:
        self.epoch = epoch
        self.models = models
        if (self.epoch + 1) % self.checkpoint_freq == 0:
            self.save_cpk()
        self.log_scores(self.names)
        self.visualize_rec(inp, out)

    @staticmethod
    def setup_logger(name: str) -> logging.Logger:
        logger = logging.getLogger(name)
        logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
        )
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        return logger



# Файл "app\src\ml\services\model.py":

import os
from shutil import copy
from time import gmtime, strftime

import torch
import yaml
from src.ml.datasets.replicate import DataParallelWithCallback
from src.ml.modules.discriminator import MultiScaleDiscriminator
from src.ml.modules.generator import OcclusionAwareGenerator
from src.ml.modules.keypoint_detector import KPDetector


class ModelService:
    def __init__(
        self,
        config_path: str,
        checkpoint_path: str = None,
        log_dir: str = "log",
        cpu: bool = False,
        verbose: bool = False,
    ) -> None:
        self.config_path = config_path
        self.checkpoint_path = checkpoint_path
        self.log_dir = log_dir
        self.cpu = cpu
        self.verbose = verbose
        self.config = self._load_config()
        self.log_dir = self._prepare_log_dir()
        self.device = torch.device("cpu" if cpu else "cuda:0")

    def _load_config(self):
        with open(self.config_path) as f:
            return yaml.safe_load(f)

    def _prepare_log_dir(self):
        if self.checkpoint_path:
            return os.path.join(*os.path.split(self.checkpoint_path)[:-1])
        else:
            log_dir = os.path.join(self.log_dir, os.path.basename(self.config_path).split(".")[0])
            log_dir += " " + strftime("%d_%m_%y_%H.%M.%S", gmtime())
            os.makedirs(log_dir, exist_ok=True)

            config_copy_path = os.path.join(log_dir, os.path.basename(self.config_path))
            if not os.path.exists(config_copy_path):
                copy(self.config_path, config_copy_path)

            return log_dir

    def init_training_models(self, device_ids: list) -> tuple[torch.nn.Module, torch.nn.Module, torch.nn.Module]:
        generator = OcclusionAwareGenerator(
            **self.config["model_params"]["generator_params"], **self.config["model_params"]["common_params"]
        )
        discriminator = MultiScaleDiscriminator(
            **self.config["model_params"]["discriminator_params"], **self.config["model_params"]["common_params"]
        )
        kp_detector = KPDetector(
            **self.config["model_params"]["kp_detector_params"], **self.config["model_params"]["common_params"]
        )

        if torch.cuda.is_available() and not self.cpu:
            generator.to(device_ids[0])
            discriminator.to(device_ids[0])
            kp_detector.to(device_ids[0])

        if self.verbose:
            print(generator)
            print(discriminator)
            print(kp_detector)

        return generator, discriminator, kp_detector

    def load_eval_models(self):
        generator = OcclusionAwareGenerator(
            **self.config["model_params"]["generator_params"],
            **self.config["model_params"]["common_params"],
        )

        kp_detector = KPDetector(
            **self.config["model_params"]["kp_detector_params"],
            **self.config["model_params"]["common_params"],
        )

        if not self.cpu:
            generator.cuda()
            kp_detector.cuda()

        checkpoint = torch.load(self.checkpoint_path, map_location=self.device)
        generator.load_state_dict(checkpoint["generator"])
        kp_detector.load_state_dict(checkpoint["kp_detector"])

        if not self.cpu:
            generator = DataParallelWithCallback(generator)
            kp_detector = DataParallelWithCallback(kp_detector)

        generator.eval()
        kp_detector.eval()

        return generator, kp_detector



# Файл "app\src\ml\services\reconstruction.py":

import os

import cv2
import numpy as np
import torch
from src.ml.datasets.replicate import DataParallelWithCallback
from src.ml.services.logging import LoggingService
from src.ml.services.visualization import VisualizationService
from torch.utils.data import DataLoader
from tqdm import tqdm

log = LoggingService.setup_logger(__name__)


class ReconstructionService:
    @staticmethod
    def reconstruction(config: dict, generator, kp_detector, checkpoint: str, log_dir: str, dataset) -> None:
        png_dir = os.path.join(log_dir, "reconstruction/png")
        log_dir = os.path.join(log_dir, "reconstruction")

        if not checkpoint:
            raise AttributeError("Checkpoint should be specified for mode='reconstruction'.")
        LoggingService.load_cpk(checkpoint, generator=generator, kp_detector=kp_detector)

        dataloader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=1)

        os.makedirs(log_dir, exist_ok=True)
        os.makedirs(png_dir, exist_ok=True)

        loss_list = []
        if torch.cuda.is_available():
            generator = DataParallelWithCallback(generator)
            kp_detector = DataParallelWithCallback(kp_detector)

        generator.eval()
        kp_detector.eval()

        for it, x in tqdm(enumerate(dataloader)):
            if config["reconstruction_params"]["num_videos"] is not None:
                if it > config["reconstruction_params"]["num_videos"]:
                    break
            with torch.no_grad():
                predictions = []
                visualizations = []
                if torch.cuda.is_available():
                    x["video"] = x["video"].cuda()

                kp_source = kp_detector(x["video"][:, :, 0])
                for frame_idx in range(x["video"].shape[2]):
                    source = x["video"][:, :, 0]
                    driving = x["video"][:, :, frame_idx]
                    kp_driving = kp_detector(driving)
                    out = generator(source, kp_source=kp_source, kp_driving=kp_driving)
                    out["kp_source"] = kp_source
                    out["kp_driving"] = kp_driving
                    del out["sparse_deformed"]
                    predictions.append(np.transpose(out["prediction"].data.cpu().numpy(), [0, 2, 3, 1])[0])

                    visualization = VisualizationService(**config["visualizer_params"]).visualize(
                        source=source, driving=driving, out=out
                    )
                    visualizations.append(visualization)

                    loss_list.append(torch.abs(out["prediction"] - driving).mean().cpu().numpy())

                predictions = np.concatenate(predictions, axis=1)

                # Save concatenated predictions as PNG using OpenCV
                image = (255 * predictions).astype(np.uint8)
                image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
                cv2.imwrite(os.path.join(png_dir, x["name"][0] + ".png"), image)

                image_name = x["name"][0] + config["reconstruction_params"]["format"]

                # Save visualizations as video using OpenCV
                if visualizations:
                    fps = config["reconstruction_params"].get("fps", 30)
                    frame_height, frame_width = visualizations[0].shape[:2]

                    # Determine FourCC based on file extension
                    file_ext = config["reconstruction_params"]["format"].lower()
                    fourcc = {".mp4": "mp4v", ".avi": "XVID", ".mov": "MJPG"}.get(file_ext, "mp4v")
                    fourcc_code = cv2.VideoWriter_fourcc(*fourcc)
                    video_path = os.path.join(log_dir, image_name)
                    video_writer = cv2.VideoWriter(video_path, fourcc_code, fps, (frame_width, frame_height))
                    for frame in visualizations:
                        frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
                        video_writer.write(frame_bgr)
                    video_writer.release()

        log.info("Reconstruction loss:", np.mean(loss_list))



# Файл "app\src\ml\services\training.py":

import torch
from src.ml.datasets.dataset_repeater import DatasetRepeater
from src.ml.datasets.replicate import DataParallelWithCallback
from src.ml.modules.discriminator.discriminator_full_model import (
    DiscriminatorFullModel,
)
from src.ml.modules.generator import GeneratorFullModel
from src.ml.services.logging import LoggingService
from torch.optim.lr_scheduler import MultiStepLR
from torch.utils.data import DataLoader
from tqdm import trange


class TrainingService:
    @staticmethod
    def train(
        config: dict, generator, discriminator, kp_detector, checkpoint: str, log_dir: str, dataset, device_ids: list
    ) -> None:
        train_params = config["train_params"]

        optimizer_generator = torch.optim.Adam(
            generator.parameters(), lr=train_params["lr_generator"], betas=(0.5, 0.999)
        )
        optimizer_discriminator = torch.optim.Adam(
            discriminator.parameters(), lr=train_params["lr_discriminator"], betas=(0.5, 0.999)
        )
        optimizer_kp_detector = torch.optim.Adam(
            kp_detector.parameters(), lr=train_params["lr_kp_detector"], betas=(0.5, 0.999)
        )

        if checkpoint:
            start_epoch = LoggingService.load_cpk(
                checkpoint,
                generator,
                discriminator,
                kp_detector,
                optimizer_generator,
                optimizer_discriminator,
                None if train_params["lr_kp_detector"] == 0 else optimizer_kp_detector,
            )
        else:
            start_epoch = 0

        scheduler_generator = MultiStepLR(
            optimizer_generator, train_params["epoch_milestones"], gamma=0.1, last_epoch=start_epoch - 1
        )
        scheduler_discriminator = MultiStepLR(
            optimizer_discriminator, train_params["epoch_milestones"], gamma=0.1, last_epoch=start_epoch - 1
        )
        scheduler_kp_detector = MultiStepLR(
            optimizer_kp_detector,
            train_params["epoch_milestones"],
            gamma=0.1,
            last_epoch=-1 + start_epoch * (train_params["lr_kp_detector"] != 0),
        )

        if "num_repeats" in train_params or train_params["num_repeats"] != 1:
            dataset = DatasetRepeater(dataset, train_params["num_repeats"])
        dataloader = DataLoader(
            dataset, batch_size=train_params["batch_size"], shuffle=True, num_workers=6, drop_last=True
        )

        generator_full = GeneratorFullModel(kp_detector, generator, discriminator, train_params)
        discriminator_full = DiscriminatorFullModel(kp_detector, generator, discriminator, train_params)

        if torch.cuda.is_available():
            generator_full = DataParallelWithCallback(generator_full, device_ids=device_ids)
            discriminator_full = DataParallelWithCallback(discriminator_full, device_ids=device_ids)

        with LoggingService(
            log_dir=log_dir,
            visualizer_params=config["visualizer_params"],
            checkpoint_freq=train_params["checkpoint_freq"],
        ) as logger:
            for epoch in trange(start_epoch, train_params["num_epochs"]):
                for x in dataloader:
                    losses_generator, generated = generator_full(x)

                    loss_values = [val.mean() for val in losses_generator.values()]
                    loss = sum(loss_values)

                    loss.backward()
                    optimizer_generator.step()
                    optimizer_generator.zero_grad()
                    optimizer_kp_detector.step()
                    optimizer_kp_detector.zero_grad()

                    if train_params["loss_weights"]["generator_gan"] != 0:
                        optimizer_discriminator.zero_grad()
                        losses_discriminator = discriminator_full(x, generated)
                        loss_values = [val.mean() for val in losses_discriminator.values()]
                        loss = sum(loss_values)

                        loss.backward()
                        optimizer_discriminator.step()
                        optimizer_discriminator.zero_grad()
                    else:
                        losses_discriminator = {}

                    losses_generator.update(losses_discriminator)
                    losses = {key: value.mean().detach().data.cpu().numpy() for key, value in losses_generator.items()}
                    logger.log_iter(losses=losses)

                scheduler_generator.step()
                scheduler_discriminator.step()
                scheduler_kp_detector.step()

                logger.log_epoch(
                    epoch,
                    {
                        "generator": generator,
                        "discriminator": discriminator,
                        "kp_detector": kp_detector,
                        "optimizer_generator": optimizer_generator,
                        "optimizer_discriminator": optimizer_discriminator,
                        "optimizer_kp_detector": optimizer_kp_detector,
                    },
                    inp=x,
                    out=generated,
                )



# Файл "app\src\ml\services\utils.py":

import warnings

import cv2
import numpy as np
from scipy.spatial import ConvexHull
from skimage.transform import resize


def find_best_frame(source_image: np.ndarray, driving_video: list[np.ndarray], cpu: bool = False) -> int:
    """
    Find the driving frame with most similar facial landmarks to source image.
    Args:
        source_image: Source image (H, W, C)
        driving_video: List of driving frames
        cpu: Force CPU execution
    Returns:
        Index of best matching frame
    """
    import face_alignment  # Lazy import to reduce dependencies

    def normalize_kp(kp: np.ndarray) -> np.ndarray:
        """Normalize keypoints by centering and scaling by face area."""
        kp = kp - kp.mean(axis=0, keepdims=True)
        area = np.sqrt(ConvexHull(kp[:, :2]).volume)
        return kp / area

    # Initialize face alignment
    device = "cpu" if cpu else "cuda"
    fa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, flip_input=True, device=device)

    # Process source landmarks
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")  # Suppress skimage resize warnings
        kp_source = fa.get_landmarks((255 * source_image).astype(np.uint8))

    if not kp_source:
        raise ValueError("No faces detected in source image")
    kp_source = normalize_kp(kp_source[0])

    # Find best matching frame
    min_norm = float("inf")
    best_frame = 0

    for i, frame in enumerate(driving_video):
        kp_driving = fa.get_landmarks((255 * frame).astype(np.uint8))
        if not kp_driving:
            continue

        kp_driving = normalize_kp(kp_driving[0])
        current_norm = np.sum((kp_source - kp_driving) ** 2)

        if current_norm < min_norm:
            min_norm = current_norm
            best_frame = i

    return best_frame


def preprocess_image(image_path: str, target_size: tuple[int, int] = (256, 256), normalize: bool = True) -> np.ndarray:
    """
    Load and preprocess an image.
    Args:
        image_path: Path to image file
        target_size: Target dimensions (H, W)
        normalize: Scale to [0,1] range
    Returns:
        Processed image array
    """
    # Read image
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError(f"Could not load image at {image_path}")

    # Convert color space
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Resize with antialiasing
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        image = resize(image, target_size, preserve_range=False, anti_aliasing=True)

    # Ensure 3 channels and normalize
    image = image[..., :3]
    if normalize:
        image = np.clip(image, 0, 1).astype(np.float32)

    return image


def load_video(
    video_path: str, target_size: tuple[int, int] = (256, 256), max_frames: int | None = None
) -> tuple[list[np.ndarray], float]:
    """
    Load and preprocess video frames.
    Args:
        video_path: Path to video file
        target_size: Target dimensions (H, W)
        max_frames: Maximum number of frames to load
    Returns:
        Tuple of (frames, fps)
    """
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        raise FileNotFoundError(f"Could not open video at {video_path}")

    fps = cap.get(cv2.CAP_PROP_FPS)
    frames = []

    while True:
        ret, frame = cap.read()
        if not ret or (max_frames and len(frames) >= max_frames):
            break

        # Convert and resize
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            frame = resize(frame, target_size, preserve_range=False, anti_aliasing=True)
        frames.append(frame[..., :3])

    cap.release()
    return frames, fps



# Файл "app\src\ml\services\video_animation.py":

from pathlib import Path

import cv2
import numpy as np
from skimage.util import img_as_ubyte
from src.ml.services.animation import AnimationService
from src.ml.services.logging import LoggingService
from src.ml.services.model import ModelService
from src.ml.services.utils import find_best_frame, load_video, preprocess_image


class VideoAnimationService:
    """Service for generating animated videos from source images and driving videos."""

    def __init__(
        self,
        config_path: str,
        checkpoint_path: str,
        source_image_path: str,
        driving_video_path: str,
        result_video_path: str,
        relative: bool = False,
        adapt_scale: bool = False,
        find_best: bool = False,
        best_frame: int | None = None,
        cpu: bool = False,
    ) -> None:
        """Initialize video fomm service.
        Args:
            config_path: Path to model configuration
            checkpoint_path: Path to model checkpoint
            source_image_path: Path to source image
            driving_video_path: Path to driving video
            result_video_path: Output video path
            relative: Use relative keypoint movement
            adapt_scale: Adapt movement scale
            find_best: Find best frame automatically
            best_frame: Specify best frame index
            cpu: Force CPU execution
        """
        self.log = LoggingService.setup_logger(__name__)
        self._validate_paths(source_image_path, driving_video_path)

        self.config_path = config_path
        self.checkpoint_path = checkpoint_path
        self.source_image_path = source_image_path
        self.driving_video_path = driving_video_path
        self.result_video_path = result_video_path
        self.relative = relative
        self.adapt_scale = adapt_scale
        self.find_best = find_best
        self.best_frame = best_frame
        self.cpu = cpu

        # Initialize models
        model_service = ModelService(config_path, checkpoint_path, cpu=cpu)
        self.generator, self.kp_detector = model_service.load_eval_models()
        self._log_init()

    @staticmethod
    def _validate_paths(*paths: str) -> None:
        """Validate input file paths exist."""
        for path in paths:
            if not Path(path).exists():
                raise FileNotFoundError(f"Path does not exist: {path}")

    def _log_init(self) -> None:
        """Log initialization parameters."""
        self.log.info(f"Initialized VideoAnimationService with:")
        self.log.info(f"Source: {self.source_image_path}")
        self.log.info(f"Driving: {self.driving_video_path}")
        self.log.info(f"Output: {self.result_video_path}")
        self.log.info(f"Settings: relative={self.relative}, adapt_scale={self.adapt_scale}")

    def run(self) -> None:
        """Execute the full fomm pipeline."""
        try:
            # Load and preprocess media
            source_image = preprocess_image(self.source_image_path)
            driving_video, fps = load_video(self.driving_video_path)

            # Generate animations
            predictions = self._generate_animations(source_image, driving_video)

            # Save results
            self._save_video(predictions, fps)
        except Exception as e:
            self.log.error(f"Animation failed: {str(e)}")
            raise

    def _generate_animations(self, source_image: np.ndarray, driving_video: list[np.ndarray]) -> list[np.ndarray]:
        """Generate fomm frames with optional best frame processing."""
        if not self.find_best and self.best_frame is None:
            return AnimationService.make_animation(
                source_image,
                driving_video,
                self.generator,
                self.kp_detector,
                relative=self.relative,
                adapt_movement_scale=self.adapt_scale,
                cpu=self.cpu,
            )

        # Handle best frame processing
        i = (
            self.best_frame
            if self.best_frame is not None
            else find_best_frame(source_image, driving_video, cpu=self.cpu)
        )
        self.log.info(f"Using frame {i} as best match")

        # Split video at best frame
        driving_forward = driving_video[i:]
        driving_backward = driving_video[: i + 1][::-1]

        # Process both segments
        predictions_forward = AnimationService.make_animation(
            source_image,
            driving_forward,
            self.generator,
            self.kp_detector,
            relative=self.relative,
            adapt_movement_scale=self.adapt_scale,
            cpu=self.cpu,
        )

        predictions_backward = AnimationService.make_animation(
            source_image,
            driving_backward,
            self.generator,
            self.kp_detector,
            relative=self.relative,
            adapt_movement_scale=self.adapt_scale,
            cpu=self.cpu,
        )

        # Combine results (excluding duplicate middle frame)
        return predictions_backward[::-1] + predictions_forward[1:]

    def _save_video(self, frames: list[np.ndarray], fps: float) -> None:
        """Save frames to video file with proper encoding."""
        if not frames:
            raise ValueError("No frames to save")

        height, width = frames[0].shape[:2]
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")

        out = None
        try:
            out = cv2.VideoWriter(self.result_video_path, fourcc, fps, (width, height))

            if not out.isOpened():
                raise IOError("Could not open video writer")

            for frame in frames:
                # Convert frame to proper format
                frame_bgr = cv2.cvtColor(img_as_ubyte(frame), cv2.COLOR_RGB2BGR)
                out.write(frame_bgr)

            self.log.info(f"Successfully saved video to {self.result_video_path}")
        finally:
            out.release() if "out" in locals() else None



# Файл "app\src\ml\services\visualization.py":

import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F
from skimage.draw import disk as circle


class VisualizationService:
    def __init__(self, kp_size: int = 5, draw_border: bool = False, colormap: str = "gist_rainbow") -> None:
        self.kp_size = kp_size
        self.draw_border = draw_border
        self.colormap = plt.get_cmap(colormap)

    def draw_image_with_kp(self, image, kp_array) -> np.ndarray:
        image = np.copy(image)
        spatial_size = np.array(image.shape[:2][::-1])[np.newaxis]
        kp_array = spatial_size * (kp_array + 1) / 2
        num_kp = kp_array.shape[0]
        for kp_ind, kp in enumerate(kp_array):
            rr, cc = circle(kp[1], kp[0], self.kp_size, shape=image.shape[:2])
            image[rr, cc] = np.array(self.colormap(kp_ind / num_kp))[:3]
        return image

    def create_image_column_with_kp(self, images, kp) -> np.ndarray:
        image_array = np.array([self.draw_image_with_kp(v, k) for v, k in zip(images, kp)])
        return self.create_image_column(image_array)

    def create_image_column(self, images) -> np.ndarray:
        if self.draw_border:
            images = np.copy(images)
            images[:, :, [0, -1]] = (1, 1, 1)
            images[:, :, [0, -1]] = (1, 1, 1)
        return np.concatenate(list(images), axis=0)

    def create_image_grid(self, *args) -> np.ndarray:
        out = []
        for arg in args:
            if type(arg) == tuple:
                out.append(self.create_image_column_with_kp(arg[0], arg[1]))
            else:
                out.append(self.create_image_column(arg))
        return np.concatenate(out, axis=1)

    def visualize(self, driving, source, out) -> np.ndarray:
        images = []

        # Source image with keypoints
        source = source.data.cpu()
        kp_source = out["kp_source"]["value"].data.cpu().numpy()
        source = np.transpose(source, [0, 2, 3, 1])
        images.append((source, kp_source))

        # Equivariance visualization
        if "transformed_frame" in out:
            transformed = out["transformed_frame"].data.cpu().numpy()
            transformed = np.transpose(transformed, [0, 2, 3, 1])
            transformed_kp = out["transformed_kp"]["value"].data.cpu().numpy()
            images.append((transformed, transformed_kp))

        # Driving image with keypoints
        kp_driving = out["kp_driving"]["value"].data.cpu().numpy()
        driving = driving.data.cpu().numpy()
        driving = np.transpose(driving, [0, 2, 3, 1])
        images.append((driving, kp_driving))

        # Deformed image
        if "deformed" in out:
            deformed = out["deformed"].data.cpu().numpy()
            deformed = np.transpose(deformed, [0, 2, 3, 1])
            images.append(deformed)

        # Result with and without keypoints
        prediction = out["prediction"].data.cpu().numpy()
        prediction = np.transpose(prediction, [0, 2, 3, 1])
        if "kp_norm" in out:
            kp_norm = out["kp_norm"]["value"].data.cpu().numpy()
            images.append((prediction, kp_norm))
        images.append(prediction)

        # Occlusion map
        if "occlusion_map" in out:
            occlusion_map = out["occlusion_map"].data.cpu().repeat(1, 3, 1, 1)
            occlusion_map = F.interpolate(occlusion_map, size=source.shape[1:3]).numpy()
            occlusion_map = np.transpose(occlusion_map, [0, 2, 3, 1])
            images.append(occlusion_map)

        # Deformed images according to each individual transform
        if "sparse_deformed" in out:
            full_mask = []
            for i in range(out["sparse_deformed"].shape[1]):
                image = out["sparse_deformed"][:, i].data.cpu()
                image = F.interpolate(image, size=source.shape[1:3])
                mask = out["mask"][:, i : (i + 1)].data.cpu().repeat(1, 3, 1, 1)
                mask = F.interpolate(mask, size=source.shape[1:3])
                image = np.transpose(image.numpy(), (0, 2, 3, 1))
                mask = np.transpose(mask.numpy(), (0, 2, 3, 1))

                if i != 0:
                    color = np.array(self.colormap((i - 1) / (out["sparse_deformed"].shape[1] - 1)))[:3]
                else:
                    color = np.array((0, 0, 0))

                color = color.reshape((1, 1, 1, 3))

                images.append(image)
                if i != 0:
                    images.append(mask * color)
                else:
                    images.append(mask)

                full_mask.append(mask * color)

            images.append(sum(full_mask))

        image = self.create_image_grid(*images)
        image = (255 * image).astype(np.uint8)
        return image



# Файл "app\src\ml\services\__init__.py":





# Файл "app\src\server\config.py":

from enum import StrEnum

from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class APIModeEnum(StrEnum):
    LOCAL = "local"
    DEV = "dev"
    STAGE = "stage"
    PROD = "prod"


class LogLevelEnum(StrEnum):
    INFO = "info"
    DEBUG = "debug"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


class APIConfig(BaseSettings):
    ML_ENGINE_KEY: str = Field(..., alias="ML_ENGINE_KEY")
    MODE: APIModeEnum = Field(..., alias="API_MODE")
    LOG_LEVEL: LogLevelEnum = Field(..., alias="LOG_LEVEL")

    model_config = SettingsConfigDict(env_file="../env/ml_engine.env")



# Файл "app\src\server\exceptions.py":

import logging
import traceback

from fastapi import Request, status
from pydantic import ValidationError
from src.server.config import APIConfig, APIModeEnum
from starlette.responses import JSONResponse

log = logging.getLogger(__name__)


class MLModelException(Exception):
    """Base exception for all errors related to ML Model"""


exception_handlers: dict[type[Exception], callable] = {
    MLModelException: lambda x: (status.HTTP_403_FORBIDDEN, "ML Model Error"),
    ValidationError: lambda x: (status.HTTP_422_UNPROCESSABLE_ENTITY, x.errors()),
}


def handle_exception(exc: Exception) -> tuple[str, int]:
    if handler := exception_handlers.get(type(exc)):
        status_code, message = handler(exc)
    else:
        status_code, message = status.HTTP_500_INTERNAL_SERVER_ERROR, "Internal server error"

    log.error(message, exc_info=True)

    if APIConfig().MODE != APIModeEnum.PROD:
        traceback_text = "".join(traceback.format_exception(type(exc), exc, exc.__traceback__))
        message = f"{message}: {str(exc)}\n{traceback_text}"

    return message, status_code


async def app_exception_handler(request: Request, exc: Exception):
    message, status_code = handle_exception(exc)
    return JSONResponse(status_code=status_code, content={"detail": message})



# Файл "app\src\server\routers.py":

import logging
import os
import shutil
from tempfile import NamedTemporaryFile
from typing import Iterator

from fastapi import APIRouter, File, HTTPException, UploadFile
from src.ml.services.video_animation import VideoAnimationService
from starlette.responses import StreamingResponse

router = APIRouter(prefix="/fomm", tags=["First Order Motion Model"])
log = logging.getLogger(__name__)


def stream_and_cleanup(filepath: str) -> Iterator[bytes]:
    try:
        with open(filepath, "rb") as f:
            yield from iter(lambda: f.read(8192), b"")
    finally:
        if os.path.exists(filepath):
            os.remove(filepath)


@router.post("/video")
async def animate_image_by_video(
    source_image: UploadFile = File(...),
    driving_video: UploadFile = File(...),
):
    try:
        log.info("Save temporary files")
        with NamedTemporaryFile(suffix=".png", delete=False) as temp_image_file, NamedTemporaryFile(
            suffix=".mp4", delete=False
        ) as temp_video_file:

            shutil.copyfileobj(source_image.file, temp_image_file)
            shutil.copyfileobj(driving_video.file, temp_video_file)
            temp_image_path = temp_image_file.name
            temp_video_path = temp_video_file.name

        output_video_path = temp_video_path.replace(".mp4", "_result.mp4")
        log.info(f"Path to final output video: {output_video_path}")

        service = VideoAnimationService(
            config_path="./data/configs/vox-256.yaml",
            checkpoint_path="./data/checkpoints/vox-cpk.pth.tar",
            source_image_path=temp_image_path,
            driving_video_path=temp_video_path,
            result_video_path=output_video_path,
            relative=False,
            adapt_scale=False,
            find_best=False,
            best_frame=None,
            cpu=True,
        )
        log.info("Run image animation service")
        service.run()

        return StreamingResponse(stream_and_cleanup(output_video_path), media_type="video/mp4")

    except Exception as e:
        log.error(f"Failed to process video: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to process video: {e}")

    finally:
        log.info("Remove temp files")
        for path in [locals().get("temp_image_path"), locals().get("temp_video_path")]:
            if path and os.path.exists(path):
                os.remove(path)



# Файл "app\src\server\__init__.py":

__version__ = "0.0.0"

from fastapi import Security
from fastapi.security import APIKeyHeader
from src.server.config import APIConfig
from src.server.exceptions import MLModelException

api_config = APIConfig()


async def validate_api_key(ml_engine_key: str = Security(APIKeyHeader(name="X-ML-Engine-Key", auto_error=False))):
    if ml_engine_key != api_config.ML_ENGINE_KEY:
        raise MLModelException("Invalid ML Engine Key")
    return ml_engine_key


